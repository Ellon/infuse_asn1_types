#ifndef GENERATED_ASN1SCC_TWISTWITHCOVARIANCE_H
#define GENERATED_ASN1SCC_TWISTWITHCOVARIANCE_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Eigen.h"
#include "Covariance.h"
#include "taste-types.h"
#include "Time.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    asn1SccVector3d vel;
    asn1SccVector3d rot;
    asn1SccCovariance cov;
} asn1SccTwistWithCovariance_data;

#define asn1SccTwistWithCovariance_data_REQUIRED_BYTES_FOR_ENCODING       546 
#define asn1SccTwistWithCovariance_data_REQUIRED_BITS_FOR_ENCODING        4368
#define asn1SccTwistWithCovariance_data_REQUIRED_BYTES_FOR_ACN_ENCODING   546 
#define asn1SccTwistWithCovariance_data_REQUIRED_BITS_FOR_ACN_ENCODING    4368
#define asn1SccTwistWithCovariance_data_REQUIRED_BYTES_FOR_XER_ENCODING   3230

void asn1SccTwistWithCovariance_data_Initialize(asn1SccTwistWithCovariance_data* pVal);
flag asn1SccTwistWithCovariance_data_IsConstraintValid(const asn1SccTwistWithCovariance_data* val, int* pErrCode);


typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccTime timeStamp;
} asn1SccTwistWithCovariance_metadata;

#define asn1SccTwistWithCovariance_metadata_REQUIRED_BYTES_FOR_ENCODING       16 
#define asn1SccTwistWithCovariance_metadata_REQUIRED_BITS_FOR_ENCODING        128
#define asn1SccTwistWithCovariance_metadata_REQUIRED_BYTES_FOR_ACN_ENCODING   16 
#define asn1SccTwistWithCovariance_metadata_REQUIRED_BITS_FOR_ACN_ENCODING    128
#define asn1SccTwistWithCovariance_metadata_REQUIRED_BYTES_FOR_XER_ENCODING   223

void asn1SccTwistWithCovariance_metadata_Initialize(asn1SccTwistWithCovariance_metadata* pVal);
flag asn1SccTwistWithCovariance_metadata_IsConstraintValid(const asn1SccTwistWithCovariance_metadata* val, int* pErrCode);


typedef struct {
    asn1SccTwistWithCovariance_metadata metadata;
    asn1SccTwistWithCovariance_data data;
} asn1SccTwistWithCovariance;

#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       562 
#define asn1SccTwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4496
#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   562 
#define asn1SccTwistWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    4496
#define asn1SccTwistWithCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   3416

void asn1SccTwistWithCovariance_Initialize(asn1SccTwistWithCovariance* pVal);
flag asn1SccTwistWithCovariance_IsConstraintValid(const asn1SccTwistWithCovariance* val, int* pErrCode);


extern const asn1SccT_UInt32 twistWithCovariance_Version; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccTwistWithCovariance_data_Encode(const asn1SccTwistWithCovariance_data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_data_Decode(asn1SccTwistWithCovariance_data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTwistWithCovariance_data_ACN_Encode(const asn1SccTwistWithCovariance_data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_data_ACN_Decode(asn1SccTwistWithCovariance_data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTwistWithCovariance_metadata_Encode(const asn1SccTwistWithCovariance_metadata* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_metadata_Decode(asn1SccTwistWithCovariance_metadata* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTwistWithCovariance_metadata_ACN_Encode(const asn1SccTwistWithCovariance_metadata* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_metadata_ACN_Decode(asn1SccTwistWithCovariance_metadata* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTwistWithCovariance_Encode(const asn1SccTwistWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_Decode(asn1SccTwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTwistWithCovariance_ACN_Encode(const asn1SccTwistWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTwistWithCovariance_ACN_Decode(asn1SccTwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
