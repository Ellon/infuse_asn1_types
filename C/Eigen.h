#ifndef GENERATED_ASN1SCC_EIGEN_H
#define GENERATED_ASN1SCC_EIGEN_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    
    asn1SccT_Double arr[6];
} asn1SccVector6d;

#define asn1SccVector6d_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccVector6d_REQUIRED_BITS_FOR_ENCODING        624
#define asn1SccVector6d_REQUIRED_BYTES_FOR_ACN_ENCODING   78 
#define asn1SccVector6d_REQUIRED_BITS_FOR_ACN_ENCODING    624
#define asn1SccVector6d_REQUIRED_BYTES_FOR_XER_ENCODING   447

void asn1SccVector6d_Initialize(asn1SccVector6d* pVal);
flag asn1SccVector6d_IsConstraintValid(const asn1SccVector6d* val, int* pErrCode);
#ifndef ERR_asn1SccVector6d 
#define ERR_asn1SccVector6d		1001  /*(SIZE(6))*/
#endif

typedef struct {    
    asn1SccT_Double arr[3];
} asn1SccVector3d;

#define asn1SccVector3d_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccVector3d_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccVector3d_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccVector3d_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccVector3d_REQUIRED_BYTES_FOR_XER_ENCODING   234

void asn1SccVector3d_Initialize(asn1SccVector3d* pVal);
flag asn1SccVector3d_IsConstraintValid(const asn1SccVector3d* val, int* pErrCode);
#ifndef ERR_asn1SccVector3d 
#define ERR_asn1SccVector3d		1002  /*(SIZE(3))*/
#endif

typedef struct {    
    asn1SccT_Double arr[4];
} asn1SccQuaterniond;

#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccQuaterniond_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccQuaterniond_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccQuaterniond_REQUIRED_BYTES_FOR_XER_ENCODING   311

void asn1SccQuaterniond_Initialize(asn1SccQuaterniond* pVal);
flag asn1SccQuaterniond_IsConstraintValid(const asn1SccQuaterniond* val, int* pErrCode);
#ifndef ERR_asn1SccQuaterniond 
#define ERR_asn1SccQuaterniond		1003  /*(SIZE(4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[100];
} asn1SccVectorXd;

#define asn1SccVectorXd_REQUIRED_BYTES_FOR_ENCODING       1301 
#define asn1SccVectorXd_REQUIRED_BITS_FOR_ENCODING        10407
#define asn1SccVectorXd_REQUIRED_BYTES_FOR_ACN_ENCODING   1301 
#define asn1SccVectorXd_REQUIRED_BITS_FOR_ACN_ENCODING    10407
#define asn1SccVectorXd_REQUIRED_BYTES_FOR_XER_ENCODING   7121

void asn1SccVectorXd_Initialize(asn1SccVectorXd* pVal);
flag asn1SccVectorXd_IsConstraintValid(const asn1SccVectorXd* val, int* pErrCode);
#ifndef ERR_asn1SccVectorXd 
#define ERR_asn1SccVectorXd		1004  /*(SIZE(0 .. 100))*/
#endif

typedef struct {    
    asn1SccT_Double arr[2];
} asn1SccVector2d;

#define asn1SccVector2d_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccVector2d_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccVector2d_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccVector2d_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccVector2d_REQUIRED_BYTES_FOR_XER_ENCODING   163

void asn1SccVector2d_Initialize(asn1SccVector2d* pVal);
flag asn1SccVector2d_IsConstraintValid(const asn1SccVector2d* val, int* pErrCode);
#ifndef ERR_asn1SccVector2d 
#define ERR_asn1SccVector2d		1005  /*(SIZE(2))*/
#endif

typedef struct {    
    asn1SccT_Double arr[4];
} asn1SccVector4d;

#define asn1SccVector4d_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccVector4d_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccVector4d_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccVector4d_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccVector4d_REQUIRED_BYTES_FOR_XER_ENCODING   305

void asn1SccVector4d_Initialize(asn1SccVector4d* pVal);
flag asn1SccVector4d_IsConstraintValid(const asn1SccVector4d* val, int* pErrCode);
#ifndef ERR_asn1SccVector4d 
#define ERR_asn1SccVector4d		1006  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccT_Double arr[4];
} asn1SccAngleAxisd;

#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccAngleAxisd_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccAngleAxisd_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccAngleAxisd_REQUIRED_BYTES_FOR_XER_ENCODING   309

void asn1SccAngleAxisd_Initialize(asn1SccAngleAxisd* pVal);
flag asn1SccAngleAxisd_IsConstraintValid(const asn1SccAngleAxisd* val, int* pErrCode);
#ifndef ERR_asn1SccAngleAxisd 
#define ERR_asn1SccAngleAxisd		1007  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccT_Double arr[4];
} asn1SccTransform3d_elm;

#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccTransform3d_elm_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccTransform3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccTransform3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   319

void asn1SccTransform3d_elm_Initialize(asn1SccTransform3d_elm* pVal);
flag asn1SccTransform3d_elm_IsConstraintValid(const asn1SccTransform3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccTransform3d_elm 
#define ERR_asn1SccTransform3d_elm		1008  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccTransform3d_elm arr[4];
} asn1SccTransform3d;

#define asn1SccTransform3d_REQUIRED_BYTES_FOR_ENCODING       208 
#define asn1SccTransform3d_REQUIRED_BITS_FOR_ENCODING        1664
#define asn1SccTransform3d_REQUIRED_BYTES_FOR_ACN_ENCODING   208 
#define asn1SccTransform3d_REQUIRED_BITS_FOR_ACN_ENCODING    1664
#define asn1SccTransform3d_REQUIRED_BYTES_FOR_XER_ENCODING   1271

void asn1SccTransform3d_Initialize(asn1SccTransform3d* pVal);
flag asn1SccTransform3d_IsConstraintValid(const asn1SccTransform3d* val, int* pErrCode);
#ifndef ERR_asn1SccTransform3d 
#define ERR_asn1SccTransform3d		1009  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccT_Double arr[4];
} asn1SccMatrix4d_elm;

#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccMatrix4d_elm_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccMatrix4d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccMatrix4d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void asn1SccMatrix4d_elm_Initialize(asn1SccMatrix4d_elm* pVal);
flag asn1SccMatrix4d_elm_IsConstraintValid(const asn1SccMatrix4d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix4d_elm 
#define ERR_asn1SccMatrix4d_elm		1010  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccMatrix4d_elm arr[4];
} asn1SccMatrix4d;

#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_ENCODING       208 
#define asn1SccMatrix4d_REQUIRED_BITS_FOR_ENCODING        1664
#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_ACN_ENCODING   208 
#define asn1SccMatrix4d_REQUIRED_BITS_FOR_ACN_ENCODING    1664
#define asn1SccMatrix4d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void asn1SccMatrix4d_Initialize(asn1SccMatrix4d* pVal);
flag asn1SccMatrix4d_IsConstraintValid(const asn1SccMatrix4d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix4d 
#define ERR_asn1SccMatrix4d		1011  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccT_Double arr[2];
} asn1SccMatrix2d_elm;

#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccMatrix2d_elm_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccMatrix2d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccMatrix2d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   171

void asn1SccMatrix2d_elm_Initialize(asn1SccMatrix2d_elm* pVal);
flag asn1SccMatrix2d_elm_IsConstraintValid(const asn1SccMatrix2d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix2d_elm 
#define ERR_asn1SccMatrix2d_elm		1012  /*(SIZE(2))*/
#endif

typedef struct {    
    asn1SccMatrix2d_elm arr[2];
} asn1SccMatrix2d;

#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccMatrix2d_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccMatrix2d_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccMatrix2d_REQUIRED_BYTES_FOR_XER_ENCODING   359

void asn1SccMatrix2d_Initialize(asn1SccMatrix2d* pVal);
flag asn1SccMatrix2d_IsConstraintValid(const asn1SccMatrix2d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix2d 
#define ERR_asn1SccMatrix2d		1013  /*(SIZE(2))*/
#endif

typedef struct {    
    asn1SccT_Double arr[4];
} asn1SccIsometry3d_elm;

#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccIsometry3d_elm_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccIsometry3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccIsometry3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   317

void asn1SccIsometry3d_elm_Initialize(asn1SccIsometry3d_elm* pVal);
flag asn1SccIsometry3d_elm_IsConstraintValid(const asn1SccIsometry3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccIsometry3d_elm 
#define ERR_asn1SccIsometry3d_elm		1014  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccIsometry3d_elm arr[4];
} asn1SccIsometry3d;

#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_ENCODING       208 
#define asn1SccIsometry3d_REQUIRED_BITS_FOR_ENCODING        1664
#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_ACN_ENCODING   208 
#define asn1SccIsometry3d_REQUIRED_BITS_FOR_ACN_ENCODING    1664
#define asn1SccIsometry3d_REQUIRED_BYTES_FOR_XER_ENCODING   1269

void asn1SccIsometry3d_Initialize(asn1SccIsometry3d* pVal);
flag asn1SccIsometry3d_IsConstraintValid(const asn1SccIsometry3d* val, int* pErrCode);
#ifndef ERR_asn1SccIsometry3d 
#define ERR_asn1SccIsometry3d		1015  /*(SIZE(4))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Double arr[20];
} asn1SccMatrixXd_elm;

#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_ENCODING       261 
#define asn1SccMatrixXd_elm_REQUIRED_BITS_FOR_ENCODING        2085
#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   261 
#define asn1SccMatrixXd_elm_REQUIRED_BITS_FOR_ACN_ENCODING    2085
#define asn1SccMatrixXd_elm_REQUIRED_BYTES_FOR_XER_ENCODING   1449

void asn1SccMatrixXd_elm_Initialize(asn1SccMatrixXd_elm* pVal);
flag asn1SccMatrixXd_elm_IsConstraintValid(const asn1SccMatrixXd_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrixXd_elm 
#define ERR_asn1SccMatrixXd_elm		1016  /*(SIZE(0 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccMatrixXd_elm arr[20];
} asn1SccMatrixXd;

#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_ENCODING       5214 
#define asn1SccMatrixXd_REQUIRED_BITS_FOR_ENCODING        41705
#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_ACN_ENCODING   5214 
#define asn1SccMatrixXd_REQUIRED_BITS_FOR_ACN_ENCODING    41705
#define asn1SccMatrixXd_REQUIRED_BYTES_FOR_XER_ENCODING   28961

void asn1SccMatrixXd_Initialize(asn1SccMatrixXd* pVal);
flag asn1SccMatrixXd_IsConstraintValid(const asn1SccMatrixXd* val, int* pErrCode);
#ifndef ERR_asn1SccMatrixXd 
#define ERR_asn1SccMatrixXd		1017  /*(SIZE(0 .. 20))*/
#endif

typedef struct {    
    asn1SccT_Double arr[3];
} asn1SccMatrix3d_elm;

#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccMatrix3d_elm_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccMatrix3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccMatrix3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   242

void asn1SccMatrix3d_elm_Initialize(asn1SccMatrix3d_elm* pVal);
flag asn1SccMatrix3d_elm_IsConstraintValid(const asn1SccMatrix3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix3d_elm 
#define ERR_asn1SccMatrix3d_elm		1018  /*(SIZE(3))*/
#endif

typedef struct {    
    asn1SccMatrix3d_elm arr[3];
} asn1SccMatrix3d;

#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_ENCODING       117 
#define asn1SccMatrix3d_REQUIRED_BITS_FOR_ENCODING        936
#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_ACN_ENCODING   117 
#define asn1SccMatrix3d_REQUIRED_BITS_FOR_ACN_ENCODING    936
#define asn1SccMatrix3d_REQUIRED_BYTES_FOR_XER_ENCODING   741

void asn1SccMatrix3d_Initialize(asn1SccMatrix3d* pVal);
flag asn1SccMatrix3d_IsConstraintValid(const asn1SccMatrix3d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix3d 
#define ERR_asn1SccMatrix3d		1019  /*(SIZE(3))*/
#endif

typedef struct {    
    asn1SccT_Double arr[6];
} asn1SccMatrix6d_elm;

#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccMatrix6d_elm_REQUIRED_BITS_FOR_ENCODING        624
#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   78 
#define asn1SccMatrix6d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    624
#define asn1SccMatrix6d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   455

void asn1SccMatrix6d_elm_Initialize(asn1SccMatrix6d_elm* pVal);
flag asn1SccMatrix6d_elm_IsConstraintValid(const asn1SccMatrix6d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix6d_elm 
#define ERR_asn1SccMatrix6d_elm		1020  /*(SIZE(6))*/
#endif

typedef struct {    
    asn1SccMatrix6d_elm arr[6];
} asn1SccMatrix6d;

#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_ENCODING       468 
#define asn1SccMatrix6d_REQUIRED_BITS_FOR_ENCODING        3744
#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_ACN_ENCODING   468 
#define asn1SccMatrix6d_REQUIRED_BITS_FOR_ACN_ENCODING    3744
#define asn1SccMatrix6d_REQUIRED_BYTES_FOR_XER_ENCODING   2739

void asn1SccMatrix6d_Initialize(asn1SccMatrix6d* pVal);
flag asn1SccMatrix6d_IsConstraintValid(const asn1SccMatrix6d* val, int* pErrCode);
#ifndef ERR_asn1SccMatrix6d 
#define ERR_asn1SccMatrix6d		1021  /*(SIZE(6))*/
#endif

typedef struct {    
    asn1SccT_Double arr[4];
} asn1SccAffine3d_elm;

#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccAffine3d_elm_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccAffine3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccAffine3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void asn1SccAffine3d_elm_Initialize(asn1SccAffine3d_elm* pVal);
flag asn1SccAffine3d_elm_IsConstraintValid(const asn1SccAffine3d_elm* val, int* pErrCode);
#ifndef ERR_asn1SccAffine3d_elm 
#define ERR_asn1SccAffine3d_elm		1022  /*(SIZE(4))*/
#endif

typedef struct {    
    asn1SccAffine3d_elm arr[4];
} asn1SccAffine3d;

#define asn1SccAffine3d_REQUIRED_BYTES_FOR_ENCODING       208 
#define asn1SccAffine3d_REQUIRED_BITS_FOR_ENCODING        1664
#define asn1SccAffine3d_REQUIRED_BYTES_FOR_ACN_ENCODING   208 
#define asn1SccAffine3d_REQUIRED_BITS_FOR_ACN_ENCODING    1664
#define asn1SccAffine3d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void asn1SccAffine3d_Initialize(asn1SccAffine3d* pVal);
flag asn1SccAffine3d_IsConstraintValid(const asn1SccAffine3d* val, int* pErrCode);
#ifndef ERR_asn1SccAffine3d 
#define ERR_asn1SccAffine3d		1023  /*(SIZE(4))*/
#endif

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccVector6d_Encode(const asn1SccVector6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector6d_Decode(asn1SccVector6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector6d_ACN_Encode(const asn1SccVector6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector6d_ACN_Decode(asn1SccVector6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector3d_Encode(const asn1SccVector3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector3d_Decode(asn1SccVector3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector3d_ACN_Encode(const asn1SccVector3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector3d_ACN_Decode(asn1SccVector3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccQuaterniond_Encode(const asn1SccQuaterniond* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccQuaterniond_Decode(asn1SccQuaterniond* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccQuaterniond_ACN_Encode(const asn1SccQuaterniond* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccQuaterniond_ACN_Decode(asn1SccQuaterniond* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVectorXd_Encode(const asn1SccVectorXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVectorXd_Decode(asn1SccVectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVectorXd_ACN_Encode(const asn1SccVectorXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVectorXd_ACN_Decode(asn1SccVectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector2d_Encode(const asn1SccVector2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector2d_Decode(asn1SccVector2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector2d_ACN_Encode(const asn1SccVector2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector2d_ACN_Decode(asn1SccVector2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector4d_Encode(const asn1SccVector4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector4d_Decode(asn1SccVector4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVector4d_ACN_Encode(const asn1SccVector4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVector4d_ACN_Decode(asn1SccVector4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngleAxisd_Encode(const asn1SccAngleAxisd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngleAxisd_Decode(asn1SccAngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAngleAxisd_ACN_Encode(const asn1SccAngleAxisd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAngleAxisd_ACN_Decode(asn1SccAngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_elm_Encode(const asn1SccTransform3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_elm_Decode(asn1SccTransform3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_elm_ACN_Encode(const asn1SccTransform3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_elm_ACN_Decode(asn1SccTransform3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_Encode(const asn1SccTransform3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_Decode(asn1SccTransform3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransform3d_ACN_Encode(const asn1SccTransform3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransform3d_ACN_Decode(asn1SccTransform3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_elm_Encode(const asn1SccMatrix4d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_elm_Decode(asn1SccMatrix4d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_elm_ACN_Encode(const asn1SccMatrix4d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_elm_ACN_Decode(asn1SccMatrix4d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_Encode(const asn1SccMatrix4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_Decode(asn1SccMatrix4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix4d_ACN_Encode(const asn1SccMatrix4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix4d_ACN_Decode(asn1SccMatrix4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_elm_Encode(const asn1SccMatrix2d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_elm_Decode(asn1SccMatrix2d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_elm_ACN_Encode(const asn1SccMatrix2d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_elm_ACN_Decode(asn1SccMatrix2d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_Encode(const asn1SccMatrix2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_Decode(asn1SccMatrix2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix2d_ACN_Encode(const asn1SccMatrix2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix2d_ACN_Decode(asn1SccMatrix2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_elm_Encode(const asn1SccIsometry3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_elm_Decode(asn1SccIsometry3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_elm_ACN_Encode(const asn1SccIsometry3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_elm_ACN_Decode(asn1SccIsometry3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_Encode(const asn1SccIsometry3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_Decode(asn1SccIsometry3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccIsometry3d_ACN_Encode(const asn1SccIsometry3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccIsometry3d_ACN_Decode(asn1SccIsometry3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_elm_Encode(const asn1SccMatrixXd_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_elm_Decode(asn1SccMatrixXd_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_elm_ACN_Encode(const asn1SccMatrixXd_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_elm_ACN_Decode(asn1SccMatrixXd_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_Encode(const asn1SccMatrixXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_Decode(asn1SccMatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrixXd_ACN_Encode(const asn1SccMatrixXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrixXd_ACN_Decode(asn1SccMatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_elm_Encode(const asn1SccMatrix3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_elm_Decode(asn1SccMatrix3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_elm_ACN_Encode(const asn1SccMatrix3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_elm_ACN_Decode(asn1SccMatrix3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_Encode(const asn1SccMatrix3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_Decode(asn1SccMatrix3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix3d_ACN_Encode(const asn1SccMatrix3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix3d_ACN_Decode(asn1SccMatrix3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_elm_Encode(const asn1SccMatrix6d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_elm_Decode(asn1SccMatrix6d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_elm_ACN_Encode(const asn1SccMatrix6d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_elm_ACN_Decode(asn1SccMatrix6d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_Encode(const asn1SccMatrix6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_Decode(asn1SccMatrix6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMatrix6d_ACN_Encode(const asn1SccMatrix6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMatrix6d_ACN_Decode(asn1SccMatrix6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_elm_Encode(const asn1SccAffine3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_elm_Decode(asn1SccAffine3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_elm_ACN_Encode(const asn1SccAffine3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_elm_ACN_Decode(asn1SccAffine3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_Encode(const asn1SccAffine3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_Decode(asn1SccAffine3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccAffine3d_ACN_Encode(const asn1SccAffine3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccAffine3d_ACN_Decode(asn1SccAffine3d* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
