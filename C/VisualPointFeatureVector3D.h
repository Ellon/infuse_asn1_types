#ifndef GENERATED_ASN1SCC_VISUALPOINTFEATUREVECTOR3D_H
#define GENERATED_ASN1SCC_VISUALPOINTFEATUREVECTOR3D_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Point.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_Float arr[352];
} asn1SccVisualPointFeature3D_descriptor;

#define asn1SccVisualPointFeature3D_descriptor_REQUIRED_BYTES_FOR_ENCODING       4578 
#define asn1SccVisualPointFeature3D_descriptor_REQUIRED_BITS_FOR_ENCODING        36617
#define asn1SccVisualPointFeature3D_descriptor_REQUIRED_BYTES_FOR_ACN_ENCODING   4578 
#define asn1SccVisualPointFeature3D_descriptor_REQUIRED_BITS_FOR_ACN_ENCODING    36617
#define asn1SccVisualPointFeature3D_descriptor_REQUIRED_BYTES_FOR_XER_ENCODING   24355

void asn1SccVisualPointFeature3D_descriptor_Initialize(asn1SccVisualPointFeature3D_descriptor* pVal);
flag asn1SccVisualPointFeature3D_descriptor_IsConstraintValid(const asn1SccVisualPointFeature3D_descriptor* val, int* pErrCode);
#ifndef ERR_asn1SccVisualPointFeature3D_descriptor 
#define ERR_asn1SccVisualPointFeature3D_descriptor		1001  /*(SIZE(0 .. descriptor3DNameLength))*/
#endif

typedef struct {
    asn1SccT_UInt16 pointCloudIdentifier;
    asn1SccT_UInt64 index;
} asn1SccPoint3DReference;

#define asn1SccPoint3DReference_REQUIRED_BYTES_FOR_ENCODING       10 
#define asn1SccPoint3DReference_REQUIRED_BITS_FOR_ENCODING        79
#define asn1SccPoint3DReference_REQUIRED_BYTES_FOR_ACN_ENCODING   10 
#define asn1SccPoint3DReference_REQUIRED_BITS_FOR_ACN_ENCODING    79
#define asn1SccPoint3DReference_REQUIRED_BYTES_FOR_XER_ENCODING   137

void asn1SccPoint3DReference_Initialize(asn1SccPoint3DReference* pVal);
flag asn1SccPoint3DReference_IsConstraintValid(const asn1SccPoint3DReference* val, int* pErrCode);


typedef struct {
    enum {
        VisualPointFeature3D_point_NONE,
        position_PRESENT,
        reference_PRESENT 
    } kind;
    union {
        asn1SccPoint3D position;
        asn1SccPoint3DReference reference;
    } u; 
} asn1SccVisualPointFeature3D_point;

#define asn1SccVisualPointFeature3D_point_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccVisualPointFeature3D_point_REQUIRED_BITS_FOR_ENCODING        314
#define asn1SccVisualPointFeature3D_point_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccVisualPointFeature3D_point_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define asn1SccVisualPointFeature3D_point_REQUIRED_BYTES_FOR_XER_ENCODING   291

void asn1SccVisualPointFeature3D_point_Initialize(asn1SccVisualPointFeature3D_point* pVal);
flag asn1SccVisualPointFeature3D_point_IsConstraintValid(const asn1SccVisualPointFeature3D_point* val, int* pErrCode);
#ifndef ERR_asn1SccVisualPointFeature3D_point_unknown_choice_index 
#define ERR_asn1SccVisualPointFeature3D_point_unknown_choice_index		1002  /**/
#endif

typedef struct {
    asn1SccVisualPointFeature3D_point point;
    asn1SccVisualPointFeature3D_descriptor descriptor;
} asn1SccVisualPointFeature3D;

#define asn1SccVisualPointFeature3D_REQUIRED_BYTES_FOR_ENCODING       4617 
#define asn1SccVisualPointFeature3D_REQUIRED_BITS_FOR_ENCODING        36931
#define asn1SccVisualPointFeature3D_REQUIRED_BYTES_FOR_ACN_ENCODING   4617 
#define asn1SccVisualPointFeature3D_REQUIRED_BITS_FOR_ACN_ENCODING    36931
#define asn1SccVisualPointFeature3D_REQUIRED_BYTES_FOR_XER_ENCODING   24607

void asn1SccVisualPointFeature3D_Initialize(asn1SccVisualPointFeature3D* pVal);
flag asn1SccVisualPointFeature3D_IsConstraintValid(const asn1SccVisualPointFeature3D* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccVisualPointFeature3D arr[51200];
} asn1SccVisualPointFeatureVector3D_list;

#define asn1SccVisualPointFeatureVector3D_list_REQUIRED_BYTES_FOR_ENCODING       236358402 
#define asn1SccVisualPointFeatureVector3D_list_REQUIRED_BITS_FOR_ENCODING        1890867216
#define asn1SccVisualPointFeatureVector3D_list_REQUIRED_BYTES_FOR_ACN_ENCODING   236358402 
#define asn1SccVisualPointFeatureVector3D_list_REQUIRED_BITS_FOR_ACN_ENCODING    1890867216
#define asn1SccVisualPointFeatureVector3D_list_REQUIRED_BYTES_FOR_XER_ENCODING   1259878467

void asn1SccVisualPointFeatureVector3D_list_Initialize(asn1SccVisualPointFeatureVector3D_list* pVal);
flag asn1SccVisualPointFeatureVector3D_list_IsConstraintValid(const asn1SccVisualPointFeatureVector3D_list* val, int* pErrCode);
#ifndef ERR_asn1SccVisualPointFeatureVector3D_list 
#define ERR_asn1SccVisualPointFeatureVector3D_list		1003  /*(SIZE(0 .. features3DElementsMax))*/
#endif

typedef enum {
    asn1Sccall_positions = 0,
    asn1Sccall_references = 1,
    asn1Scchybrid_vector = 2
} asn1SccVisualPointFeatureVector3DType;

#define asn1SccVisualPointFeatureVector3DType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccVisualPointFeatureVector3DType_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccVisualPointFeatureVector3DType_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccVisualPointFeatureVector3DType_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccVisualPointFeatureVector3DType_REQUIRED_BYTES_FOR_XER_ENCODING   94

void asn1SccVisualPointFeatureVector3DType_Initialize(asn1SccVisualPointFeatureVector3DType* pVal);
flag asn1SccVisualPointFeatureVector3DType_IsConstraintValid(const asn1SccVisualPointFeatureVector3DType* val, int* pErrCode);
#ifndef ERR_asn1SccVisualPointFeatureVector3DType_unknown_enumeration_value 
#define ERR_asn1SccVisualPointFeatureVector3DType_unknown_enumeration_value		1005  /**/
#endif
#ifndef ERR_asn1SccVisualPointFeatureVector3DType 
#define ERR_asn1SccVisualPointFeatureVector3DType		1004  /**/
#endif

typedef struct {
    asn1SccVisualPointFeatureVector3D_list list;
    asn1SccVisualPointFeatureVector3DType list_type;
} asn1SccVisualPointFeatureVector3D;

#define asn1SccVisualPointFeatureVector3D_REQUIRED_BYTES_FOR_ENCODING       236358403 
#define asn1SccVisualPointFeatureVector3D_REQUIRED_BITS_FOR_ENCODING        1890867218
#define asn1SccVisualPointFeatureVector3D_REQUIRED_BYTES_FOR_ACN_ENCODING   236358403 
#define asn1SccVisualPointFeatureVector3D_REQUIRED_BITS_FOR_ACN_ENCODING    1890867218
#define asn1SccVisualPointFeatureVector3D_REQUIRED_BYTES_FOR_XER_ENCODING   1259878522

void asn1SccVisualPointFeatureVector3D_Initialize(asn1SccVisualPointFeatureVector3D* pVal);
flag asn1SccVisualPointFeatureVector3D_IsConstraintValid(const asn1SccVisualPointFeatureVector3D* val, int* pErrCode);


extern const asn1SccT_UInt32 features3DElementsMax;
extern const asn1SccT_UInt32 descriptor3DNameLength; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccVisualPointFeature3D_descriptor_Encode(const asn1SccVisualPointFeature3D_descriptor* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeature3D_descriptor_Decode(asn1SccVisualPointFeature3D_descriptor* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeature3D_descriptor_ACN_Encode(const asn1SccVisualPointFeature3D_descriptor* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeature3D_descriptor_ACN_Decode(asn1SccVisualPointFeature3D_descriptor* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint3DReference_Encode(const asn1SccPoint3DReference* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint3DReference_Decode(asn1SccPoint3DReference* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint3DReference_ACN_Encode(const asn1SccPoint3DReference* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint3DReference_ACN_Decode(asn1SccPoint3DReference* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeature3D_point_Encode(const asn1SccVisualPointFeature3D_point* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeature3D_point_Decode(asn1SccVisualPointFeature3D_point* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeature3D_point_ACN_Encode(const asn1SccVisualPointFeature3D_point* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeature3D_point_ACN_Decode(asn1SccVisualPointFeature3D_point* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeature3D_Encode(const asn1SccVisualPointFeature3D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeature3D_Decode(asn1SccVisualPointFeature3D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeature3D_ACN_Encode(const asn1SccVisualPointFeature3D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeature3D_ACN_Decode(asn1SccVisualPointFeature3D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeatureVector3D_list_Encode(const asn1SccVisualPointFeatureVector3D_list* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeatureVector3D_list_Decode(asn1SccVisualPointFeatureVector3D_list* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeatureVector3D_list_ACN_Encode(const asn1SccVisualPointFeatureVector3D_list* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeatureVector3D_list_ACN_Decode(asn1SccVisualPointFeatureVector3D_list* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeatureVector3DType_Encode(const asn1SccVisualPointFeatureVector3DType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeatureVector3DType_Decode(asn1SccVisualPointFeatureVector3DType* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeatureVector3DType_ACN_Encode(const asn1SccVisualPointFeatureVector3DType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeatureVector3DType_ACN_Decode(asn1SccVisualPointFeatureVector3DType* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeatureVector3D_Encode(const asn1SccVisualPointFeatureVector3D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeatureVector3D_Decode(asn1SccVisualPointFeatureVector3D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccVisualPointFeatureVector3D_ACN_Encode(const asn1SccVisualPointFeatureVector3D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccVisualPointFeatureVector3D_ACN_Decode(asn1SccVisualPointFeatureVector3D* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccall_positions	asn1Sccall_positions
#define ENUM_asn1Sccall_references	asn1Sccall_references
#define ENUM_asn1Scchybrid_vector	asn1Scchybrid_vector
#define CHOICE_position_PRESENT	asn1SccVisualPointFeature3D_point::position_PRESENT
#define CHOICE_reference_PRESENT	asn1SccVisualPointFeature3D_point::reference_PRESENT

#endif

#endif
