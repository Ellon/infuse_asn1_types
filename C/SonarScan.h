#ifndef GENERATED_ASN1SCC_SONARSCAN_H
#define GENERATED_ASN1SCC_SONARSCAN_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Angle.h"
#include "taste-types.h"
#include "Time.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[60];
} asn1SccSonarScan_data;

#define asn1SccSonarScan_data_REQUIRED_BYTES_FOR_ENCODING       61 
#define asn1SccSonarScan_data_REQUIRED_BITS_FOR_ENCODING        486
#define asn1SccSonarScan_data_REQUIRED_BYTES_FOR_ACN_ENCODING   61 
#define asn1SccSonarScan_data_REQUIRED_BITS_FOR_ACN_ENCODING    486
#define asn1SccSonarScan_data_REQUIRED_BYTES_FOR_XER_ENCODING   2373

void asn1SccSonarScan_data_Initialize(asn1SccSonarScan_data* pVal);
flag asn1SccSonarScan_data_IsConstraintValid(const asn1SccSonarScan_data* val, int* pErrCode);
#ifndef ERR_asn1SccSonarScan_data 
#define ERR_asn1SccSonarScan_data		1001  /*(SIZE(1 .. maxSonarScanDataSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccTime arr[60];
} asn1SccSonarScan_time_beams;

#define asn1SccSonarScan_time_beams_REQUIRED_BYTES_FOR_ENCODING       721 
#define asn1SccSonarScan_time_beams_REQUIRED_BITS_FOR_ENCODING        5766
#define asn1SccSonarScan_time_beams_REQUIRED_BYTES_FOR_ACN_ENCODING   721 
#define asn1SccSonarScan_time_beams_REQUIRED_BITS_FOR_ACN_ENCODING    5766
#define asn1SccSonarScan_time_beams_REQUIRED_BYTES_FOR_XER_ENCODING   6465

void asn1SccSonarScan_time_beams_Initialize(asn1SccSonarScan_time_beams* pVal);
flag asn1SccSonarScan_time_beams_IsConstraintValid(const asn1SccSonarScan_time_beams* val, int* pErrCode);
#ifndef ERR_asn1SccSonarScan_time_beams 
#define ERR_asn1SccSonarScan_time_beams		1002  /*(SIZE(1 .. maxSonarScanDataSize))*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccSonarScan_data data;
    asn1SccSonarScan_time_beams time_beams;
    asn1SccT_UInt16 number_of_beams;
    asn1SccT_UInt16 number_of_bins;
    asn1SccAngle start_bearing;
    asn1SccAngle angular_resolution;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccAngle beamwidth_horizontal;
    asn1SccAngle beamwidth_vertical;
    asn1SccT_Boolean memory_layout_column;
    asn1SccT_Boolean polar_coordinates;
} asn1SccSonarScan;

#define asn1SccSonarScan_REQUIRED_BYTES_FOR_ENCODING       876 
#define asn1SccSonarScan_REQUIRED_BITS_FOR_ENCODING        7006
#define asn1SccSonarScan_REQUIRED_BYTES_FOR_ACN_ENCODING   876 
#define asn1SccSonarScan_REQUIRED_BITS_FOR_ACN_ENCODING    7006
#define asn1SccSonarScan_REQUIRED_BYTES_FOR_XER_ENCODING   9728

void asn1SccSonarScan_Initialize(asn1SccSonarScan* pVal);
flag asn1SccSonarScan_IsConstraintValid(const asn1SccSonarScan* val, int* pErrCode);


extern const asn1SccT_UInt32 maxSonarScanDataSize; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccSonarScan_data_Encode(const asn1SccSonarScan_data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarScan_data_Decode(asn1SccSonarScan_data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccSonarScan_data_ACN_Encode(const asn1SccSonarScan_data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarScan_data_ACN_Decode(asn1SccSonarScan_data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccSonarScan_time_beams_Encode(const asn1SccSonarScan_time_beams* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarScan_time_beams_Decode(asn1SccSonarScan_time_beams* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccSonarScan_time_beams_ACN_Encode(const asn1SccSonarScan_time_beams* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarScan_time_beams_ACN_Decode(asn1SccSonarScan_time_beams* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccSonarScan_Encode(const asn1SccSonarScan* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarScan_Decode(asn1SccSonarScan* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccSonarScan_ACN_Encode(const asn1SccSonarScan* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccSonarScan_ACN_Decode(asn1SccSonarScan* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
