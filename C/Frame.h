#ifndef GENERATED_ASN1SCC_FRAME_H
#define GENERATED_ASN1SCC_FRAME_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Eigen.h"
#include "TransformWithCovariance.h"
#include "taste-types.h"
#include "Time.h"
#include "Array3D.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    asn1SccT_String name;
    asn1SccT_String data;
} asn1SccFrame_attrib_t;

#define asn1SccFrame_attrib_t_REQUIRED_BYTES_FOR_ENCODING       515 
#define asn1SccFrame_attrib_t_REQUIRED_BITS_FOR_ENCODING        4114
#define asn1SccFrame_attrib_t_REQUIRED_BYTES_FOR_ACN_ENCODING   515 
#define asn1SccFrame_attrib_t_REQUIRED_BITS_FOR_ACN_ENCODING    4114
#define asn1SccFrame_attrib_t_REQUIRED_BYTES_FOR_XER_ENCODING   1083

void asn1SccFrame_attrib_t_Initialize(asn1SccFrame_attrib_t* pVal);
flag asn1SccFrame_attrib_t_IsConstraintValid(const asn1SccFrame_attrib_t* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccFrame_attrib_t arr[5];
} asn1SccFrame_metadata_t_attributes;

#define asn1SccFrame_metadata_t_attributes_REQUIRED_BYTES_FOR_ENCODING       2572 
#define asn1SccFrame_metadata_t_attributes_REQUIRED_BITS_FOR_ENCODING        20573
#define asn1SccFrame_metadata_t_attributes_REQUIRED_BYTES_FOR_ACN_ENCODING   2572 
#define asn1SccFrame_metadata_t_attributes_REQUIRED_BITS_FOR_ACN_ENCODING    20573
#define asn1SccFrame_metadata_t_attributes_REQUIRED_BYTES_FOR_XER_ENCODING   5474

void asn1SccFrame_metadata_t_attributes_Initialize(asn1SccFrame_metadata_t_attributes* pVal);
flag asn1SccFrame_metadata_t_attributes_IsConstraintValid(const asn1SccFrame_metadata_t_attributes* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_metadata_t_attributes 
#define ERR_asn1SccFrame_metadata_t_attributes		1001  /*(SIZE(0 .. frameMaxAttributes))*/
#endif

typedef struct {
    asn1SccT_UInt32 msgVersion;
    flag hasFixedTransform;
    asn1SccTransformWithCovariance pose_robotFrame_sensorFrame;
    asn1SccTransformWithCovariance pose_fixedFrame_robotFrame;
} asn1SccFrame_extrinsic_t;

#define asn1SccFrame_extrinsic_t_REQUIRED_BYTES_FOR_ENCODING       2723 
#define asn1SccFrame_extrinsic_t_REQUIRED_BITS_FOR_ENCODING        21781
#define asn1SccFrame_extrinsic_t_REQUIRED_BYTES_FOR_ACN_ENCODING   2723 
#define asn1SccFrame_extrinsic_t_REQUIRED_BITS_FOR_ACN_ENCODING    21781
#define asn1SccFrame_extrinsic_t_REQUIRED_BYTES_FOR_XER_ENCODING   10998

void asn1SccFrame_extrinsic_t_Initialize(asn1SccFrame_extrinsic_t* pVal);
flag asn1SccFrame_extrinsic_t_IsConstraintValid(const asn1SccFrame_extrinsic_t* val, int* pErrCode);


typedef enum {
    asn1Sccpix_UNDEF = 0,
    asn1Sccpix_POLY = 1,
    asn1Sccpix_DISP = 2
} asn1SccFrame_pixelModel_t;

#define asn1SccFrame_pixelModel_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccFrame_pixelModel_t_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccFrame_pixelModel_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccFrame_pixelModel_t_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccFrame_pixelModel_t_REQUIRED_BYTES_FOR_XER_ENCODING   62

void asn1SccFrame_pixelModel_t_Initialize(asn1SccFrame_pixelModel_t* pVal);
flag asn1SccFrame_pixelModel_t_IsConstraintValid(const asn1SccFrame_pixelModel_t* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_pixelModel_t_unknown_enumeration_value 
#define ERR_asn1SccFrame_pixelModel_t_unknown_enumeration_value		1003  /**/
#endif
#ifndef ERR_asn1SccFrame_pixelModel_t 
#define ERR_asn1SccFrame_pixelModel_t		1002  /**/
#endif

typedef enum {
    asn1Sccerror_UNDEFINED = 0,
    asn1Sccerror_DEAD = 1,
    asn1Sccerror_FILTERED = 2
} asn1SccFrame_errorType_t;

#define asn1SccFrame_errorType_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccFrame_errorType_t_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccFrame_errorType_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccFrame_errorType_t_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccFrame_errorType_t_REQUIRED_BYTES_FOR_XER_ENCODING   72

void asn1SccFrame_errorType_t_Initialize(asn1SccFrame_errorType_t* pVal);
flag asn1SccFrame_errorType_t_IsConstraintValid(const asn1SccFrame_errorType_t* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_errorType_t_unknown_enumeration_value 
#define ERR_asn1SccFrame_errorType_t_unknown_enumeration_value		1005  /**/
#endif
#ifndef ERR_asn1SccFrame_errorType_t 
#define ERR_asn1SccFrame_errorType_t		1004  /**/
#endif

typedef struct {
    asn1SccFrame_errorType_t type;
    asn1SccT_Double value;
} asn1SccFrame_error_t;

#define asn1SccFrame_error_t_REQUIRED_BYTES_FOR_ENCODING       14 
#define asn1SccFrame_error_t_REQUIRED_BITS_FOR_ENCODING        106
#define asn1SccFrame_error_t_REQUIRED_BYTES_FOR_ACN_ENCODING   14 
#define asn1SccFrame_error_t_REQUIRED_BITS_FOR_ACN_ENCODING    106
#define asn1SccFrame_error_t_REQUIRED_BYTES_FOR_XER_ENCODING   142

void asn1SccFrame_error_t_Initialize(asn1SccFrame_error_t* pVal);
flag asn1SccFrame_error_t_IsConstraintValid(const asn1SccFrame_error_t* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccFrame_error_t arr[3];
} asn1SccFrame_metadata_t_errValues;

#define asn1SccFrame_metadata_t_errValues_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccFrame_metadata_t_errValues_REQUIRED_BITS_FOR_ENCODING        320
#define asn1SccFrame_metadata_t_errValues_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define asn1SccFrame_metadata_t_errValues_REQUIRED_BITS_FOR_ACN_ENCODING    320
#define asn1SccFrame_metadata_t_errValues_REQUIRED_BYTES_FOR_XER_ENCODING   483

void asn1SccFrame_metadata_t_errValues_Initialize(asn1SccFrame_metadata_t_errValues* pVal);
flag asn1SccFrame_metadata_t_errValues_IsConstraintValid(const asn1SccFrame_metadata_t_errValues* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_metadata_t_errValues 
#define ERR_asn1SccFrame_metadata_t_errValues		1006  /*(SIZE(0 .. frameMaxErrValues))*/
#endif

typedef enum {
    asn1Sccmode_UNDEF = 0,
    asn1Sccmode_GRAY = 1,
    asn1Sccmode_RGB = 2,
    asn1Sccmode_RGBA = 3,
    asn1Sccmode_BGR = 4,
    asn1Sccmode_BGRA = 5,
    asn1Sccmode_HSV = 6,
    asn1Sccmode_HLS = 7,
    asn1Sccmode_YUV = 8,
    asn1Sccmode_UYVY = 9,
    asn1Sccmode_Lab = 10,
    asn1Sccmode_Luv = 11,
    asn1Sccmode_XYZ = 12,
    asn1Sccmode_YCrCb = 13,
    asn1Sccmode_RGB32 = 14,
    asn1Sccmode_Bayer_RGGB = 15,
    asn1Sccmode_Bayer_GRBG = 16,
    asn1Sccmode_Bayer_BGGR = 17,
    asn1Sccmode_Bayer_GBRG = 18,
    asn1Sccmode_PJPG = 19,
    asn1Sccmode_JPEG = 20,
    asn1Sccmode_PNG = 21
} asn1SccFrame_mode_t;

#define asn1SccFrame_mode_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccFrame_mode_t_REQUIRED_BITS_FOR_ENCODING        5
#define asn1SccFrame_mode_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccFrame_mode_t_REQUIRED_BITS_FOR_ACN_ENCODING    5
#define asn1SccFrame_mode_t_REQUIRED_BYTES_FOR_XER_ENCODING   48

void asn1SccFrame_mode_t_Initialize(asn1SccFrame_mode_t* pVal);
flag asn1SccFrame_mode_t_IsConstraintValid(const asn1SccFrame_mode_t* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_mode_t_unknown_enumeration_value 
#define ERR_asn1SccFrame_mode_t_unknown_enumeration_value		1008  /**/
#endif
#ifndef ERR_asn1SccFrame_mode_t 
#define ERR_asn1SccFrame_mode_t		1007  /**/
#endif

typedef enum {
    asn1Sccstatus_EMPTY = 0,
    asn1Sccstatus_VALID = 1,
    asn1Sccstatus_INVALID = 2
} asn1SccFrame_status_t;

#define asn1SccFrame_status_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccFrame_status_t_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccFrame_status_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccFrame_status_t_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccFrame_status_t_REQUIRED_BYTES_FOR_XER_ENCODING   60

void asn1SccFrame_status_t_Initialize(asn1SccFrame_status_t* pVal);
flag asn1SccFrame_status_t_IsConstraintValid(const asn1SccFrame_status_t* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_status_t_unknown_enumeration_value 
#define ERR_asn1SccFrame_status_t_unknown_enumeration_value		1010  /**/
#endif
#ifndef ERR_asn1SccFrame_status_t 
#define ERR_asn1SccFrame_status_t		1009  /**/
#endif

typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccTime timeStamp;
    asn1SccTime receivedTime;
    asn1SccFrame_pixelModel_t pixelModel;
    asn1SccVectorXd pixelCoeffs;
    asn1SccFrame_metadata_t_errValues errValues;
    asn1SccFrame_metadata_t_attributes attributes;
    asn1SccFrame_mode_t mode;
    asn1SccFrame_status_t status;
} asn1SccFrame_metadata_t;

#define asn1SccFrame_metadata_t_REQUIRED_BYTES_FOR_ENCODING       3942 
#define asn1SccFrame_metadata_t_REQUIRED_BITS_FOR_ENCODING        31533
#define asn1SccFrame_metadata_t_REQUIRED_BYTES_FOR_ACN_ENCODING   3942 
#define asn1SccFrame_metadata_t_REQUIRED_BITS_FOR_ACN_ENCODING    31533
#define asn1SccFrame_metadata_t_REQUIRED_BYTES_FOR_XER_ENCODING   13460

void asn1SccFrame_metadata_t_Initialize(asn1SccFrame_metadata_t* pVal);
flag asn1SccFrame_metadata_t_IsConstraintValid(const asn1SccFrame_metadata_t* val, int* pErrCode);


typedef enum {
    asn1Scccam_UNDEF = 0,
    asn1Scccam_PINHOLE = 1,
    asn1Scccam_FISHEYE = 2,
    asn1Scccam_MAPS = 3
} asn1SccFrame_cameraModel_t;

#define asn1SccFrame_cameraModel_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccFrame_cameraModel_t_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccFrame_cameraModel_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccFrame_cameraModel_t_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccFrame_cameraModel_t_REQUIRED_BYTES_FOR_XER_ENCODING   64

void asn1SccFrame_cameraModel_t_Initialize(asn1SccFrame_cameraModel_t* pVal);
flag asn1SccFrame_cameraModel_t_IsConstraintValid(const asn1SccFrame_cameraModel_t* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_cameraModel_t_unknown_enumeration_value 
#define ERR_asn1SccFrame_cameraModel_t_unknown_enumeration_value		1012  /**/
#endif
#ifndef ERR_asn1SccFrame_cameraModel_t 
#define ERR_asn1SccFrame_cameraModel_t		1011  /**/
#endif

typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccT_String sensorId;
    asn1SccMatrix3d cameraMatrix;
    asn1SccFrame_cameraModel_t cameraModel;
    asn1SccVectorXd distCoeffs;
} asn1SccFrame_intrinsic_t;

#define asn1SccFrame_intrinsic_t_REQUIRED_BYTES_FOR_ENCODING       1680 
#define asn1SccFrame_intrinsic_t_REQUIRED_BITS_FOR_ENCODING        13434
#define asn1SccFrame_intrinsic_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1680 
#define asn1SccFrame_intrinsic_t_REQUIRED_BITS_FOR_ACN_ENCODING    13434
#define asn1SccFrame_intrinsic_t_REQUIRED_BYTES_FOR_XER_ENCODING   8539

void asn1SccFrame_intrinsic_t_Initialize(asn1SccFrame_intrinsic_t* pVal);
flag asn1SccFrame_intrinsic_t_IsConstraintValid(const asn1SccFrame_intrinsic_t* val, int* pErrCode);


typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccFrame_metadata_t metadata;
    asn1SccFrame_intrinsic_t intrinsic;
    asn1SccFrame_extrinsic_t extrinsic;
    asn1SccArray3D data;
} asn1SccFrame;

#define asn1SccFrame_REQUIRED_BYTES_FOR_ENCODING       66364583 
#define asn1SccFrame_REQUIRED_BITS_FOR_ENCODING        530916663
#define asn1SccFrame_REQUIRED_BYTES_FOR_ACN_ENCODING   66363572 
#define asn1SccFrame_REQUIRED_BITS_FOR_ACN_ENCODING    530908569
#define asn1SccFrame_REQUIRED_BYTES_FOR_XER_ENCODING   132743660

void asn1SccFrame_Initialize(asn1SccFrame* pVal);
flag asn1SccFrame_IsConstraintValid(const asn1SccFrame* val, int* pErrCode);


typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccT_Double baseline;
    asn1SccFrame left;
    asn1SccFrame right;
} asn1SccFramePair;

#define asn1SccFramePair_REQUIRED_BYTES_FOR_ENCODING       132729183 
#define asn1SccFramePair_REQUIRED_BITS_FOR_ENCODING        1061833462
#define asn1SccFramePair_REQUIRED_BYTES_FOR_ACN_ENCODING   132727160 
#define asn1SccFramePair_REQUIRED_BITS_FOR_ACN_ENCODING    1061817274
#define asn1SccFramePair_REQUIRED_BYTES_FOR_XER_ENCODING   265487457

void asn1SccFramePair_Initialize(asn1SccFramePair* pVal);
flag asn1SccFramePair_IsConstraintValid(const asn1SccFramePair* val, int* pErrCode);


extern const asn1SccT_UInt32 frame_Version;
extern const asn1SccT_UInt32 frameMaxAttributes;
extern const asn1SccT_UInt32 frameMaxErrValues; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccFrame_attrib_t_Encode(const asn1SccFrame_attrib_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_attrib_t_Decode(asn1SccFrame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_attrib_t_ACN_Encode(const asn1SccFrame_attrib_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_attrib_t_ACN_Decode(asn1SccFrame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_metadata_t_attributes_Encode(const asn1SccFrame_metadata_t_attributes* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_metadata_t_attributes_Decode(asn1SccFrame_metadata_t_attributes* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_metadata_t_attributes_ACN_Encode(const asn1SccFrame_metadata_t_attributes* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_metadata_t_attributes_ACN_Decode(asn1SccFrame_metadata_t_attributes* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_extrinsic_t_Encode(const asn1SccFrame_extrinsic_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_extrinsic_t_Decode(asn1SccFrame_extrinsic_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_extrinsic_t_ACN_Encode(const asn1SccFrame_extrinsic_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_extrinsic_t_ACN_Decode(asn1SccFrame_extrinsic_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_pixelModel_t_Encode(const asn1SccFrame_pixelModel_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_pixelModel_t_Decode(asn1SccFrame_pixelModel_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_pixelModel_t_ACN_Encode(const asn1SccFrame_pixelModel_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_pixelModel_t_ACN_Decode(asn1SccFrame_pixelModel_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_errorType_t_Encode(const asn1SccFrame_errorType_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_errorType_t_Decode(asn1SccFrame_errorType_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_errorType_t_ACN_Encode(const asn1SccFrame_errorType_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_errorType_t_ACN_Decode(asn1SccFrame_errorType_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_error_t_Encode(const asn1SccFrame_error_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_error_t_Decode(asn1SccFrame_error_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_error_t_ACN_Encode(const asn1SccFrame_error_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_error_t_ACN_Decode(asn1SccFrame_error_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_metadata_t_errValues_Encode(const asn1SccFrame_metadata_t_errValues* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_metadata_t_errValues_Decode(asn1SccFrame_metadata_t_errValues* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_metadata_t_errValues_ACN_Encode(const asn1SccFrame_metadata_t_errValues* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_metadata_t_errValues_ACN_Decode(asn1SccFrame_metadata_t_errValues* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_mode_t_Encode(const asn1SccFrame_mode_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_mode_t_Decode(asn1SccFrame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_mode_t_ACN_Encode(const asn1SccFrame_mode_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_mode_t_ACN_Decode(asn1SccFrame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_status_t_Encode(const asn1SccFrame_status_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_status_t_Decode(asn1SccFrame_status_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_status_t_ACN_Encode(const asn1SccFrame_status_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_status_t_ACN_Decode(asn1SccFrame_status_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_metadata_t_Encode(const asn1SccFrame_metadata_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_metadata_t_Decode(asn1SccFrame_metadata_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_metadata_t_ACN_Encode(const asn1SccFrame_metadata_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_metadata_t_ACN_Decode(asn1SccFrame_metadata_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_cameraModel_t_Encode(const asn1SccFrame_cameraModel_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_cameraModel_t_Decode(asn1SccFrame_cameraModel_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_cameraModel_t_ACN_Encode(const asn1SccFrame_cameraModel_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_cameraModel_t_ACN_Decode(asn1SccFrame_cameraModel_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_intrinsic_t_Encode(const asn1SccFrame_intrinsic_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_intrinsic_t_Decode(asn1SccFrame_intrinsic_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_intrinsic_t_ACN_Encode(const asn1SccFrame_intrinsic_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_intrinsic_t_ACN_Decode(asn1SccFrame_intrinsic_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_Encode(const asn1SccFrame* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_Decode(asn1SccFrame* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_ACN_Encode(const asn1SccFrame* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_ACN_Decode(asn1SccFrame* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFramePair_Encode(const asn1SccFramePair* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFramePair_Decode(asn1SccFramePair* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFramePair_ACN_Encode(const asn1SccFramePair* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFramePair_ACN_Decode(asn1SccFramePair* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccpix_UNDEF	asn1Sccpix_UNDEF
#define ENUM_asn1Sccpix_POLY	asn1Sccpix_POLY
#define ENUM_asn1Sccpix_DISP	asn1Sccpix_DISP
#define ENUM_asn1Sccerror_UNDEFINED	asn1Sccerror_UNDEFINED
#define ENUM_asn1Sccerror_DEAD	asn1Sccerror_DEAD
#define ENUM_asn1Sccerror_FILTERED	asn1Sccerror_FILTERED
#define ENUM_asn1Sccmode_UNDEF	asn1Sccmode_UNDEF
#define ENUM_asn1Sccmode_GRAY	asn1Sccmode_GRAY
#define ENUM_asn1Sccmode_RGB	asn1Sccmode_RGB
#define ENUM_asn1Sccmode_RGBA	asn1Sccmode_RGBA
#define ENUM_asn1Sccmode_BGR	asn1Sccmode_BGR
#define ENUM_asn1Sccmode_BGRA	asn1Sccmode_BGRA
#define ENUM_asn1Sccmode_HSV	asn1Sccmode_HSV
#define ENUM_asn1Sccmode_HLS	asn1Sccmode_HLS
#define ENUM_asn1Sccmode_YUV	asn1Sccmode_YUV
#define ENUM_asn1Sccmode_UYVY	asn1Sccmode_UYVY
#define ENUM_asn1Sccmode_Lab	asn1Sccmode_Lab
#define ENUM_asn1Sccmode_Luv	asn1Sccmode_Luv
#define ENUM_asn1Sccmode_XYZ	asn1Sccmode_XYZ
#define ENUM_asn1Sccmode_YCrCb	asn1Sccmode_YCrCb
#define ENUM_asn1Sccmode_RGB32	asn1Sccmode_RGB32
#define ENUM_asn1Sccmode_Bayer_RGGB	asn1Sccmode_Bayer_RGGB
#define ENUM_asn1Sccmode_Bayer_GRBG	asn1Sccmode_Bayer_GRBG
#define ENUM_asn1Sccmode_Bayer_BGGR	asn1Sccmode_Bayer_BGGR
#define ENUM_asn1Sccmode_Bayer_GBRG	asn1Sccmode_Bayer_GBRG
#define ENUM_asn1Sccmode_PJPG	asn1Sccmode_PJPG
#define ENUM_asn1Sccmode_JPEG	asn1Sccmode_JPEG
#define ENUM_asn1Sccmode_PNG	asn1Sccmode_PNG
#define ENUM_asn1Sccstatus_EMPTY	asn1Sccstatus_EMPTY
#define ENUM_asn1Sccstatus_VALID	asn1Sccstatus_VALID
#define ENUM_asn1Sccstatus_INVALID	asn1Sccstatus_INVALID
#define ENUM_asn1Scccam_UNDEF	asn1Scccam_UNDEF
#define ENUM_asn1Scccam_PINHOLE	asn1Scccam_PINHOLE
#define ENUM_asn1Scccam_FISHEYE	asn1Scccam_FISHEYE
#define ENUM_asn1Scccam_MAPS	asn1Scccam_MAPS

#endif

#endif
