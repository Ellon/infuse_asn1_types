#ifndef GENERATED_ASN1SCC_TRANSFORMWITHCOVARIANCE_H
#define GENERATED_ASN1SCC_TRANSFORMWITHCOVARIANCE_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Eigen.h"
#include "Covariance.h"
#include "taste-types.h"
#include "Time.h"
#include "Pose.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    asn1SccPosition translation;
    asn1SccQuaterniond orientation;
    asn1SccCovariance cov;
} asn1SccTransformWithCovariance_Data;

#define asn1SccTransformWithCovariance_Data_REQUIRED_BYTES_FOR_ENCODING       559 
#define asn1SccTransformWithCovariance_Data_REQUIRED_BITS_FOR_ENCODING        4472
#define asn1SccTransformWithCovariance_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   559 
#define asn1SccTransformWithCovariance_Data_REQUIRED_BITS_FOR_ACN_ENCODING    4472
#define asn1SccTransformWithCovariance_Data_REQUIRED_BYTES_FOR_XER_ENCODING   3341

void asn1SccTransformWithCovariance_Data_Initialize(asn1SccTransformWithCovariance_Data* pVal);
flag asn1SccTransformWithCovariance_Data_IsConstraintValid(const asn1SccTransformWithCovariance_Data* val, int* pErrCode);


typedef struct {    
    flag arr[7];
} asn1SccTransformWithCovariance_Metadata_dataEstimated;

#define asn1SccTransformWithCovariance_Metadata_dataEstimated_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccTransformWithCovariance_Metadata_dataEstimated_REQUIRED_BITS_FOR_ENCODING        7
#define asn1SccTransformWithCovariance_Metadata_dataEstimated_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccTransformWithCovariance_Metadata_dataEstimated_REQUIRED_BITS_FOR_ACN_ENCODING    7
#define asn1SccTransformWithCovariance_Metadata_dataEstimated_REQUIRED_BYTES_FOR_XER_ENCODING   223

void asn1SccTransformWithCovariance_Metadata_dataEstimated_Initialize(asn1SccTransformWithCovariance_Metadata_dataEstimated* pVal);
flag asn1SccTransformWithCovariance_Metadata_dataEstimated_IsConstraintValid(const asn1SccTransformWithCovariance_Metadata_dataEstimated* val, int* pErrCode);
#ifndef ERR_asn1SccTransformWithCovariance_Metadata_dataEstimated 
#define ERR_asn1SccTransformWithCovariance_Metadata_dataEstimated		1001  /*(SIZE(7))*/
#endif

typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccT_String producerId;
    asn1SccTransformWithCovariance_Metadata_dataEstimated dataEstimated;
    asn1SccT_String parentFrameId;
    asn1SccTime parentTime;
    asn1SccT_String childFrameId;
    asn1SccTime childTime;
} asn1SccTransformWithCovariance_Metadata;

#define asn1SccTransformWithCovariance_Metadata_REQUIRED_BYTES_FOR_ENCODING       801 
#define asn1SccTransformWithCovariance_Metadata_REQUIRED_BITS_FOR_ENCODING        6402
#define asn1SccTransformWithCovariance_Metadata_REQUIRED_BYTES_FOR_ACN_ENCODING   801 
#define asn1SccTransformWithCovariance_Metadata_REQUIRED_BITS_FOR_ACN_ENCODING    6402
#define asn1SccTransformWithCovariance_Metadata_REQUIRED_BYTES_FOR_XER_ENCODING   2128

void asn1SccTransformWithCovariance_Metadata_Initialize(asn1SccTransformWithCovariance_Metadata* pVal);
flag asn1SccTransformWithCovariance_Metadata_IsConstraintValid(const asn1SccTransformWithCovariance_Metadata* val, int* pErrCode);


typedef struct {
    asn1SccTransformWithCovariance_Metadata metadata;
    asn1SccTransformWithCovariance_Data data;
} asn1SccTransformWithCovariance;

#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_ENCODING       1360 
#define asn1SccTransformWithCovariance_REQUIRED_BITS_FOR_ENCODING        10874
#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING   1360 
#define asn1SccTransformWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING    10874
#define asn1SccTransformWithCovariance_REQUIRED_BYTES_FOR_XER_ENCODING   5424

void asn1SccTransformWithCovariance_Initialize(asn1SccTransformWithCovariance* pVal);
flag asn1SccTransformWithCovariance_IsConstraintValid(const asn1SccTransformWithCovariance* val, int* pErrCode);


extern const asn1SccT_UInt32 transformWithCovariance_version; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccTransformWithCovariance_Data_Encode(const asn1SccTransformWithCovariance_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Data_Decode(asn1SccTransformWithCovariance_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Data_ACN_Encode(const asn1SccTransformWithCovariance_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Data_ACN_Decode(asn1SccTransformWithCovariance_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Metadata_dataEstimated_Encode(const asn1SccTransformWithCovariance_Metadata_dataEstimated* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Metadata_dataEstimated_Decode(asn1SccTransformWithCovariance_Metadata_dataEstimated* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Metadata_dataEstimated_ACN_Encode(const asn1SccTransformWithCovariance_Metadata_dataEstimated* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Metadata_dataEstimated_ACN_Decode(asn1SccTransformWithCovariance_Metadata_dataEstimated* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Metadata_Encode(const asn1SccTransformWithCovariance_Metadata* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Metadata_Decode(asn1SccTransformWithCovariance_Metadata* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Metadata_ACN_Encode(const asn1SccTransformWithCovariance_Metadata* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Metadata_ACN_Decode(asn1SccTransformWithCovariance_Metadata* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_Encode(const asn1SccTransformWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_Decode(asn1SccTransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTransformWithCovariance_ACN_Encode(const asn1SccTransformWithCovariance* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTransformWithCovariance_ACN_Decode(asn1SccTransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
