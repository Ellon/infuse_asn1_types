#ifndef GENERATED_ASN1SCC_JOINTLIMITRANGE_H
#define GENERATED_ASN1SCC_JOINTLIMITRANGE_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "JointState.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    asn1SccT_String error_name;
    asn1SccT_Double min;
    asn1SccT_Double max;
    asn1SccT_Double value;
} asn1SccOutOfBounds;

#define asn1SccOutOfBounds_REQUIRED_BYTES_FOR_ENCODING       297 
#define asn1SccOutOfBounds_REQUIRED_BITS_FOR_ENCODING        2369
#define asn1SccOutOfBounds_REQUIRED_BYTES_FOR_ACN_ENCODING   297 
#define asn1SccOutOfBounds_REQUIRED_BITS_FOR_ACN_ENCODING    2369
#define asn1SccOutOfBounds_REQUIRED_BYTES_FOR_XER_ENCODING   751

void asn1SccOutOfBounds_Initialize(asn1SccOutOfBounds* pVal);
flag asn1SccOutOfBounds_IsConstraintValid(const asn1SccOutOfBounds* val, int* pErrCode);


typedef struct {
    asn1SccJointState min;
    asn1SccJointState max;
} asn1SccJointLimitRange;

#define asn1SccJointLimitRange_REQUIRED_BYTES_FOR_ENCODING       130 
#define asn1SccJointLimitRange_REQUIRED_BITS_FOR_ENCODING        1040
#define asn1SccJointLimitRange_REQUIRED_BYTES_FOR_ACN_ENCODING   130 
#define asn1SccJointLimitRange_REQUIRED_BITS_FOR_ACN_ENCODING    1040
#define asn1SccJointLimitRange_REQUIRED_BYTES_FOR_XER_ENCODING   743

void asn1SccJointLimitRange_Initialize(asn1SccJointLimitRange* pVal);
flag asn1SccJointLimitRange_IsConstraintValid(const asn1SccJointLimitRange* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccOutOfBounds_Encode(const asn1SccOutOfBounds* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOutOfBounds_Decode(asn1SccOutOfBounds* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOutOfBounds_ACN_Encode(const asn1SccOutOfBounds* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOutOfBounds_ACN_Decode(asn1SccOutOfBounds* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointLimitRange_Encode(const asn1SccJointLimitRange* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointLimitRange_Decode(asn1SccJointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccJointLimitRange_ACN_Encode(const asn1SccJointLimitRange* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccJointLimitRange_ACN_Decode(asn1SccJointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
