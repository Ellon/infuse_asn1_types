#ifndef GENERATED_ASN1SCC_LASERSCAN_H
#define GENERATED_ASN1SCC_LASERSCAN_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Time.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_Int32 arr[2000];
} asn1SccLaserScan_ranges;

#define asn1SccLaserScan_ranges_REQUIRED_BYTES_FOR_ENCODING       8002 
#define asn1SccLaserScan_ranges_REQUIRED_BITS_FOR_ENCODING        64011
#define asn1SccLaserScan_ranges_REQUIRED_BYTES_FOR_ACN_ENCODING   8002 
#define asn1SccLaserScan_ranges_REQUIRED_BITS_FOR_ACN_ENCODING    64011
#define asn1SccLaserScan_ranges_REQUIRED_BYTES_FOR_XER_ENCODING   78037

void asn1SccLaserScan_ranges_Initialize(asn1SccLaserScan_ranges* pVal);
flag asn1SccLaserScan_ranges_IsConstraintValid(const asn1SccLaserScan_ranges* val, int* pErrCode);
#ifndef ERR_asn1SccLaserScan_ranges 
#define ERR_asn1SccLaserScan_ranges		1001  /*(SIZE(1 .. maxLaserScanSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccT_Float arr[2000];
} asn1SccLaserScan_remission;

#define asn1SccLaserScan_remission_REQUIRED_BYTES_FOR_ENCODING       26002 
#define asn1SccLaserScan_remission_REQUIRED_BITS_FOR_ENCODING        208011
#define asn1SccLaserScan_remission_REQUIRED_BYTES_FOR_ACN_ENCODING   26002 
#define asn1SccLaserScan_remission_REQUIRED_BITS_FOR_ACN_ENCODING    208011
#define asn1SccLaserScan_remission_REQUIRED_BYTES_FOR_XER_ENCODING   138043

void asn1SccLaserScan_remission_Initialize(asn1SccLaserScan_remission* pVal);
flag asn1SccLaserScan_remission_IsConstraintValid(const asn1SccLaserScan_remission* val, int* pErrCode);
#ifndef ERR_asn1SccLaserScan_remission 
#define ERR_asn1SccLaserScan_remission		1002  /*(SIZE(1 .. maxLaserScanSize))*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccT_Double start_angle;
    asn1SccT_Double angular_resolution;
    asn1SccT_Double speed;
    asn1SccLaserScan_ranges ranges;
    asn1SccT_UInt32 minRange;
    asn1SccT_UInt32 maxRange;
    asn1SccLaserScan_remission remission;
} asn1SccLaserScan;

#define asn1SccLaserScan_REQUIRED_BYTES_FOR_ENCODING       34062 
#define asn1SccLaserScan_REQUIRED_BITS_FOR_ENCODING        272494
#define asn1SccLaserScan_REQUIRED_BYTES_FOR_ACN_ENCODING   34062 
#define asn1SccLaserScan_REQUIRED_BITS_FOR_ACN_ENCODING    272494
#define asn1SccLaserScan_REQUIRED_BYTES_FOR_XER_ENCODING   216493

void asn1SccLaserScan_Initialize(asn1SccLaserScan* pVal);
flag asn1SccLaserScan_IsConstraintValid(const asn1SccLaserScan* val, int* pErrCode);


typedef enum {
    asn1SccLASER_RANGE_ERRORS_too_far = 0,
    asn1SccLASER_RANGE_ERRORS_too_near = 1,
    asn1SccLASER_RANGE_ERRORS_measurement_error = 2,
    asn1Sccother_range_errors = 3,
    asn1Sccmax_range_error = 4,
    asn1Sccend_laser_range_errors = 5
} asn1SccLASER_RANGE_ERRORS;

#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccLASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_XER_ENCODING   60

void asn1SccLASER_RANGE_ERRORS_Initialize(asn1SccLASER_RANGE_ERRORS* pVal);
flag asn1SccLASER_RANGE_ERRORS_IsConstraintValid(const asn1SccLASER_RANGE_ERRORS* val, int* pErrCode);
#ifndef ERR_asn1SccLASER_RANGE_ERRORS_unknown_enumeration_value 
#define ERR_asn1SccLASER_RANGE_ERRORS_unknown_enumeration_value		1004  /**/
#endif
#ifndef ERR_asn1SccLASER_RANGE_ERRORS 
#define ERR_asn1SccLASER_RANGE_ERRORS		1003  /**/
#endif

extern const asn1SccT_UInt32 maxLaserScanSize; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccLaserScan_ranges_Encode(const asn1SccLaserScan_ranges* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_ranges_Decode(asn1SccLaserScan_ranges* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_ranges_ACN_Encode(const asn1SccLaserScan_ranges* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_ranges_ACN_Decode(asn1SccLaserScan_ranges* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_remission_Encode(const asn1SccLaserScan_remission* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_remission_Decode(asn1SccLaserScan_remission* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_remission_ACN_Encode(const asn1SccLaserScan_remission* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_remission_ACN_Decode(asn1SccLaserScan_remission* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_Encode(const asn1SccLaserScan* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_Decode(asn1SccLaserScan* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLaserScan_ACN_Encode(const asn1SccLaserScan* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLaserScan_ACN_Decode(asn1SccLaserScan* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLASER_RANGE_ERRORS_Encode(const asn1SccLASER_RANGE_ERRORS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLASER_RANGE_ERRORS_Decode(asn1SccLASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccLASER_RANGE_ERRORS_ACN_Encode(const asn1SccLASER_RANGE_ERRORS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccLASER_RANGE_ERRORS_ACN_Decode(asn1SccLASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1SccLASER_RANGE_ERRORS_too_far	asn1SccLASER_RANGE_ERRORS_too_far
#define ENUM_asn1SccLASER_RANGE_ERRORS_too_near	asn1SccLASER_RANGE_ERRORS_too_near
#define ENUM_asn1SccLASER_RANGE_ERRORS_measurement_error	asn1SccLASER_RANGE_ERRORS_measurement_error
#define ENUM_asn1Sccother_range_errors	asn1Sccother_range_errors
#define ENUM_asn1Sccmax_range_error	asn1Sccmax_range_error
#define ENUM_asn1Sccend_laser_range_errors	asn1Sccend_laser_range_errors

#endif

#endif
