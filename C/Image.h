#ifndef GENERATED_ASN1SCC_IMAGE_H
#define GENERATED_ASN1SCC_IMAGE_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Time.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;
} asn1SccImage_size_t;

#define asn1SccImage_size_t_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccImage_size_t_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccImage_size_t_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccImage_size_t_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccImage_size_t_REQUIRED_BYTES_FOR_XER_ENCODING   101

void asn1SccImage_size_t_Initialize(asn1SccImage_size_t* pVal);
flag asn1SccImage_size_t_IsConstraintValid(const asn1SccImage_size_t* val, int* pErrCode);


typedef struct {
    asn1SccT_String data;
    asn1SccT_String att_name;
} asn1SccImage_attrib_t;

#define asn1SccImage_attrib_t_REQUIRED_BYTES_FOR_ENCODING       515 
#define asn1SccImage_attrib_t_REQUIRED_BITS_FOR_ENCODING        4114
#define asn1SccImage_attrib_t_REQUIRED_BYTES_FOR_ACN_ENCODING   515 
#define asn1SccImage_attrib_t_REQUIRED_BITS_FOR_ACN_ENCODING    4114
#define asn1SccImage_attrib_t_REQUIRED_BYTES_FOR_XER_ENCODING   1091

void asn1SccImage_attrib_t_Initialize(asn1SccImage_attrib_t* pVal);
flag asn1SccImage_attrib_t_IsConstraintValid(const asn1SccImage_attrib_t* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccImage_attrib_t arr[5];
} asn1SccImage_attributes;

#define asn1SccImage_attributes_REQUIRED_BYTES_FOR_ENCODING       2572 
#define asn1SccImage_attributes_REQUIRED_BITS_FOR_ENCODING        20573
#define asn1SccImage_attributes_REQUIRED_BYTES_FOR_ACN_ENCODING   2572 
#define asn1SccImage_attributes_REQUIRED_BITS_FOR_ACN_ENCODING    20573
#define asn1SccImage_attributes_REQUIRED_BYTES_FOR_XER_ENCODING   5492

void asn1SccImage_attributes_Initialize(asn1SccImage_attributes* pVal);
flag asn1SccImage_attributes_IsConstraintValid(const asn1SccImage_attributes* val, int* pErrCode);
#ifndef ERR_asn1SccImage_attributes 
#define ERR_asn1SccImage_attributes		1001  /*(SIZE(0 .. imageMaxAttributes))*/
#endif

typedef enum {
    asn1Sccmode_undefined = 0,
    asn1Sccmode_grayscale = 1,
    asn1Sccmode_rgb = 2,
    asn1Sccmode_uyvy = 3,
    asn1Sccmode_bgr = 4,
    asn1Sccmode_rgb32 = 5,
    asn1Sccraw_modes = 6,
    asn1Sccmode_bayer = 7,
    asn1Sccmode_bayer_rggb = 8,
    asn1Sccmode_bayer_grbg = 9,
    asn1Sccmode_bayer_bggr = 10,
    asn1Sccmode_bayer_gbrg = 11,
    asn1Scccompressed_modes = 12,
    asn1SccImage_mode_t_mode_pjpg = 13,
    asn1Sccmode_jpeg = 14,
    asn1Sccmode_png = 15
} asn1SccImage_mode_t;

#define asn1SccImage_mode_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccImage_mode_t_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccImage_mode_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccImage_mode_t_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccImage_mode_t_REQUIRED_BYTES_FOR_XER_ENCODING   50

void asn1SccImage_mode_t_Initialize(asn1SccImage_mode_t* pVal);
flag asn1SccImage_mode_t_IsConstraintValid(const asn1SccImage_mode_t* val, int* pErrCode);
#ifndef ERR_asn1SccImage_mode_t_unknown_enumeration_value 
#define ERR_asn1SccImage_mode_t_unknown_enumeration_value		1003  /**/
#endif
#ifndef ERR_asn1SccImage_mode_t 
#define ERR_asn1SccImage_mode_t		1002  /**/
#endif

typedef enum {
    asn1Sccstatus_empty = 0,
    asn1Sccstatus_valid = 1,
    asn1Sccstatus_invalid = 2
} asn1SccImage_status_t;

#define asn1SccImage_status_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccImage_status_t_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccImage_status_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccImage_status_t_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccImage_status_t_REQUIRED_BYTES_FOR_XER_ENCODING   60

void asn1SccImage_status_t_Initialize(asn1SccImage_status_t* pVal);
flag asn1SccImage_status_t_IsConstraintValid(const asn1SccImage_status_t* val, int* pErrCode);
#ifndef ERR_asn1SccImage_status_t_unknown_enumeration_value 
#define ERR_asn1SccImage_status_t_unknown_enumeration_value		1005  /**/
#endif
#ifndef ERR_asn1SccImage_status_t 
#define ERR_asn1SccImage_status_t		1004  /**/
#endif

typedef struct {    int nCount; 
    
    byte arr[24883200];
} asn1SccImage_image;

#define asn1SccImage_image_REQUIRED_BYTES_FOR_ENCODING       24883582 
#define asn1SccImage_image_REQUIRED_BITS_FOR_ENCODING        199068656
#define asn1SccImage_image_REQUIRED_BYTES_FOR_ACN_ENCODING   24883204 
#define asn1SccImage_image_REQUIRED_BITS_FOR_ACN_ENCODING    199065625
#define asn1SccImage_image_REQUIRED_BYTES_FOR_XER_ENCODING   49766427

void asn1SccImage_image_Initialize(asn1SccImage_image* pVal);
flag asn1SccImage_image_IsConstraintValid(const asn1SccImage_image* val, int* pErrCode);
#ifndef ERR_asn1SccImage_image 
#define ERR_asn1SccImage_image		1006  /*(SIZE(0 .. imageMaxBytes))*/
#endif

typedef struct {
    asn1SccTime frame_time;
    asn1SccTime received_time;
    asn1SccImage_image image;
    asn1SccImage_attributes attributes;
    asn1SccImage_size_t datasize;
    asn1SccT_UInt32 data_depth;
    asn1SccT_UInt32 pixel_size;
    asn1SccT_UInt32 row_size;
    asn1SccImage_mode_t frame_mode;
    asn1SccImage_status_t frame_status;
} asn1SccImage;

#define asn1SccImage_REQUIRED_BYTES_FOR_ENCODING       24886195 
#define asn1SccImage_REQUIRED_BITS_FOR_ENCODING        199089555
#define asn1SccImage_REQUIRED_BYTES_FOR_ACN_ENCODING   24885816 
#define asn1SccImage_REQUIRED_BITS_FOR_ACN_ENCODING    199086524
#define asn1SccImage_REQUIRED_BYTES_FOR_XER_ENCODING   49772480

void asn1SccImage_Initialize(asn1SccImage* pVal);
flag asn1SccImage_IsConstraintValid(const asn1SccImage* val, int* pErrCode);


typedef struct {
    asn1SccTime frame_time;
    asn1SccImage first;
    asn1SccImage second;
    asn1SccT_UInt32 id;
} asn1SccImagePair;

#define asn1SccImagePair_REQUIRED_BYTES_FOR_ENCODING       49772405 
#define asn1SccImagePair_REQUIRED_BITS_FOR_ENCODING        398179238
#define asn1SccImagePair_REQUIRED_BYTES_FOR_ACN_ENCODING   49771647 
#define asn1SccImagePair_REQUIRED_BITS_FOR_ACN_ENCODING    398173176
#define asn1SccImagePair_REQUIRED_BYTES_FOR_XER_ENCODING   99545133

void asn1SccImagePair_Initialize(asn1SccImagePair* pVal);
flag asn1SccImagePair_IsConstraintValid(const asn1SccImagePair* val, int* pErrCode);


extern const asn1SccT_UInt32 imageMaxBytes;
extern const asn1SccT_UInt32 imageMaxRows;
extern const asn1SccT_UInt32 imageMaxCols;
extern const asn1SccT_UInt32 imageMaxAttributes; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccImage_size_t_Encode(const asn1SccImage_size_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_size_t_Decode(asn1SccImage_size_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_size_t_ACN_Encode(const asn1SccImage_size_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_size_t_ACN_Decode(asn1SccImage_size_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_attrib_t_Encode(const asn1SccImage_attrib_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_attrib_t_Decode(asn1SccImage_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_attrib_t_ACN_Encode(const asn1SccImage_attrib_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_attrib_t_ACN_Decode(asn1SccImage_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_attributes_Encode(const asn1SccImage_attributes* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_attributes_Decode(asn1SccImage_attributes* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_attributes_ACN_Encode(const asn1SccImage_attributes* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_attributes_ACN_Decode(asn1SccImage_attributes* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_mode_t_Encode(const asn1SccImage_mode_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_mode_t_Decode(asn1SccImage_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_mode_t_ACN_Encode(const asn1SccImage_mode_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_mode_t_ACN_Decode(asn1SccImage_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_status_t_Encode(const asn1SccImage_status_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_status_t_Decode(asn1SccImage_status_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_status_t_ACN_Encode(const asn1SccImage_status_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_status_t_ACN_Decode(asn1SccImage_status_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_image_Encode(const asn1SccImage_image* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_image_Decode(asn1SccImage_image* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_image_ACN_Encode(const asn1SccImage_image* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_image_ACN_Decode(asn1SccImage_image* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_Encode(const asn1SccImage* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_Decode(asn1SccImage* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImage_ACN_Encode(const asn1SccImage* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImage_ACN_Decode(asn1SccImage* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImagePair_Encode(const asn1SccImagePair* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImagePair_Decode(asn1SccImagePair* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccImagePair_ACN_Encode(const asn1SccImagePair* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccImagePair_ACN_Decode(asn1SccImagePair* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccmode_undefined	asn1Sccmode_undefined
#define ENUM_asn1Sccmode_grayscale	asn1Sccmode_grayscale
#define ENUM_asn1Sccmode_rgb	asn1Sccmode_rgb
#define ENUM_asn1Sccmode_uyvy	asn1Sccmode_uyvy
#define ENUM_asn1Sccmode_bgr	asn1Sccmode_bgr
#define ENUM_asn1Sccmode_rgb32	asn1Sccmode_rgb32
#define ENUM_asn1Sccraw_modes	asn1Sccraw_modes
#define ENUM_asn1Sccmode_bayer	asn1Sccmode_bayer
#define ENUM_asn1Sccmode_bayer_rggb	asn1Sccmode_bayer_rggb
#define ENUM_asn1Sccmode_bayer_grbg	asn1Sccmode_bayer_grbg
#define ENUM_asn1Sccmode_bayer_bggr	asn1Sccmode_bayer_bggr
#define ENUM_asn1Sccmode_bayer_gbrg	asn1Sccmode_bayer_gbrg
#define ENUM_asn1Scccompressed_modes	asn1Scccompressed_modes
#define ENUM_asn1SccImage_mode_t_mode_pjpg	asn1SccImage_mode_t_mode_pjpg
#define ENUM_asn1Sccmode_jpeg	asn1Sccmode_jpeg
#define ENUM_asn1Sccmode_png	asn1Sccmode_png
#define ENUM_asn1Sccstatus_empty	asn1Sccstatus_empty
#define ENUM_asn1Sccstatus_valid	asn1Sccstatus_valid
#define ENUM_asn1Sccstatus_invalid	asn1Sccstatus_invalid

#endif

#endif
