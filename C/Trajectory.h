#ifndef GENERATED_ASN1SCC_TRAJECTORY_H
#define GENERATED_ASN1SCC_TRAJECTORY_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Point.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccPoint arr[50];
} asn1SccTrajectory_points;

#define asn1SccTrajectory_points_REQUIRED_BYTES_FOR_ENCODING       1951 
#define asn1SccTrajectory_points_REQUIRED_BITS_FOR_ENCODING        15606
#define asn1SccTrajectory_points_REQUIRED_BYTES_FOR_ACN_ENCODING   1951 
#define asn1SccTrajectory_points_REQUIRED_BITS_FOR_ACN_ENCODING    15606
#define asn1SccTrajectory_points_REQUIRED_BYTES_FOR_XER_ENCODING   11439

void asn1SccTrajectory_points_Initialize(asn1SccTrajectory_points* pVal);
flag asn1SccTrajectory_points_IsConstraintValid(const asn1SccTrajectory_points* val, int* pErrCode);
#ifndef ERR_asn1SccTrajectory_points 
#define ERR_asn1SccTrajectory_points		1001  /*(SIZE(1 .. maxTrajectoryPoints))*/
#endif

typedef struct {
    asn1SccT_Double speed;
    asn1SccTrajectory_points points;
} asn1SccTrajectory;

#define asn1SccTrajectory_REQUIRED_BYTES_FOR_ENCODING       1964 
#define asn1SccTrajectory_REQUIRED_BITS_FOR_ENCODING        15710
#define asn1SccTrajectory_REQUIRED_BYTES_FOR_ACN_ENCODING   1964 
#define asn1SccTrajectory_REQUIRED_BITS_FOR_ACN_ENCODING    15710
#define asn1SccTrajectory_REQUIRED_BYTES_FOR_XER_ENCODING   11507

void asn1SccTrajectory_Initialize(asn1SccTrajectory* pVal);
flag asn1SccTrajectory_IsConstraintValid(const asn1SccTrajectory* val, int* pErrCode);


extern const asn1SccT_UInt32 maxTrajectoryPoints; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccTrajectory_points_Encode(const asn1SccTrajectory_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTrajectory_points_Decode(asn1SccTrajectory_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTrajectory_points_ACN_Encode(const asn1SccTrajectory_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTrajectory_points_ACN_Decode(asn1SccTrajectory_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTrajectory_Encode(const asn1SccTrajectory* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTrajectory_Decode(asn1SccTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTrajectory_ACN_Encode(const asn1SccTrajectory* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTrajectory_ACN_Decode(asn1SccTrajectory* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
