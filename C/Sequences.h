#ifndef GENERATED_ASN1SCC_SEQUENCES_H
#define GENERATED_ASN1SCC_SEQUENCES_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Pose.h"
#include "Frame.h"
#include "CorrespondenceMap2D.h"
#include "CorrespondenceMap3D.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccFrame arr[10];
} asn1SccFramesSequence;

#define asn1SccFramesSequence_REQUIRED_BYTES_FOR_ENCODING       663645830 
#define asn1SccFramesSequence_REQUIRED_BITS_FOR_ENCODING        5309166634LL
#define asn1SccFramesSequence_REQUIRED_BYTES_FOR_ACN_ENCODING   663635712 
#define asn1SccFramesSequence_REQUIRED_BITS_FOR_ACN_ENCODING    5309085694LL
#define asn1SccFramesSequence_REQUIRED_BYTES_FOR_XER_ENCODING   1327436633

void asn1SccFramesSequence_Initialize(asn1SccFramesSequence* pVal);
flag asn1SccFramesSequence_IsConstraintValid(const asn1SccFramesSequence* val, int* pErrCode);
#ifndef ERR_asn1SccFramesSequence 
#define ERR_asn1SccFramesSequence		1001  /*(SIZE(0 .. maxFramesSequenceLength))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccPose arr[10];
} asn1SccPosesSequence;

#define asn1SccPosesSequence_REQUIRED_BYTES_FOR_ENCODING       911 
#define asn1SccPosesSequence_REQUIRED_BITS_FOR_ENCODING        7284
#define asn1SccPosesSequence_REQUIRED_BYTES_FOR_ACN_ENCODING   911 
#define asn1SccPosesSequence_REQUIRED_BITS_FOR_ACN_ENCODING    7284
#define asn1SccPosesSequence_REQUIRED_BYTES_FOR_XER_ENCODING   5411

void asn1SccPosesSequence_Initialize(asn1SccPosesSequence* pVal);
flag asn1SccPosesSequence_IsConstraintValid(const asn1SccPosesSequence* val, int* pErrCode);
#ifndef ERR_asn1SccPosesSequence 
#define ERR_asn1SccPosesSequence		1002  /*(SIZE(0 .. maxPosesSequenceLength))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccCorrespondenceMap2D arr[56];
} asn1SccCorrespondenceMaps2DSequence;

#define asn1SccCorrespondenceMaps2DSequence_REQUIRED_BYTES_FOR_ENCODING       3727438 
#define asn1SccCorrespondenceMaps2DSequence_REQUIRED_BITS_FOR_ENCODING        29819502
#define asn1SccCorrespondenceMaps2DSequence_REQUIRED_BYTES_FOR_ACN_ENCODING   3727438 
#define asn1SccCorrespondenceMaps2DSequence_REQUIRED_BITS_FOR_ACN_ENCODING    29819502
#define asn1SccCorrespondenceMaps2DSequence_REQUIRED_BYTES_FOR_XER_ENCODING   24545701

void asn1SccCorrespondenceMaps2DSequence_Initialize(asn1SccCorrespondenceMaps2DSequence* pVal);
flag asn1SccCorrespondenceMaps2DSequence_IsConstraintValid(const asn1SccCorrespondenceMaps2DSequence* val, int* pErrCode);
#ifndef ERR_asn1SccCorrespondenceMaps2DSequence 
#define ERR_asn1SccCorrespondenceMaps2DSequence		1003  /*(SIZE(0 .. maxCorrespondenceMapsSequenceLength))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccCorrespondenceMap3D arr[56];
} asn1SccCorrespondenceMaps3DSequence;

#define asn1SccCorrespondenceMaps3DSequence_REQUIRED_BYTES_FOR_ENCODING       260915313 
#define asn1SccCorrespondenceMaps3DSequence_REQUIRED_BITS_FOR_ENCODING        2087322502
#define asn1SccCorrespondenceMaps3DSequence_REQUIRED_BYTES_FOR_ACN_ENCODING   260915313 
#define asn1SccCorrespondenceMaps3DSequence_REQUIRED_BITS_FOR_ACN_ENCODING    2087322502
#define asn1SccCorrespondenceMaps3DSequence_REQUIRED_BYTES_FOR_XER_ENCODING   1634306469

void asn1SccCorrespondenceMaps3DSequence_Initialize(asn1SccCorrespondenceMaps3DSequence* pVal);
flag asn1SccCorrespondenceMaps3DSequence_IsConstraintValid(const asn1SccCorrespondenceMaps3DSequence* val, int* pErrCode);
#ifndef ERR_asn1SccCorrespondenceMaps3DSequence 
#define ERR_asn1SccCorrespondenceMaps3DSequence		1004  /*(SIZE(0 .. maxCorrespondenceMapsSequenceLength))*/
#endif

extern const asn1SccT_UInt32 maxFramesSequenceLength;
extern const asn1SccT_UInt32 maxPosesSequenceLength;
extern const asn1SccT_UInt32 maxCorrespondenceMapsSequenceLength; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccFramesSequence_Encode(const asn1SccFramesSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFramesSequence_Decode(asn1SccFramesSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFramesSequence_ACN_Encode(const asn1SccFramesSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFramesSequence_ACN_Decode(asn1SccFramesSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosesSequence_Encode(const asn1SccPosesSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosesSequence_Decode(asn1SccPosesSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosesSequence_ACN_Encode(const asn1SccPosesSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosesSequence_ACN_Decode(asn1SccPosesSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCorrespondenceMaps2DSequence_Encode(const asn1SccCorrespondenceMaps2DSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCorrespondenceMaps2DSequence_Decode(asn1SccCorrespondenceMaps2DSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCorrespondenceMaps2DSequence_ACN_Encode(const asn1SccCorrespondenceMaps2DSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCorrespondenceMaps2DSequence_ACN_Decode(asn1SccCorrespondenceMaps2DSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCorrespondenceMaps3DSequence_Encode(const asn1SccCorrespondenceMaps3DSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCorrespondenceMaps3DSequence_Decode(asn1SccCorrespondenceMaps3DSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCorrespondenceMaps3DSequence_ACN_Encode(const asn1SccCorrespondenceMaps3DSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCorrespondenceMaps3DSequence_ACN_Decode(asn1SccCorrespondenceMaps3DSequence* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
