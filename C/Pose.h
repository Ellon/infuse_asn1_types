#ifndef GENERATED_ASN1SCC_POSE_H
#define GENERATED_ASN1SCC_POSE_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Eigen.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    asn1SccT_Double distance;
    asn1SccT_Double angle;
} asn1SccPoseUpdateThreshold;

#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccPoseUpdateThreshold_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccPoseUpdateThreshold_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccPoseUpdateThreshold_REQUIRED_BYTES_FOR_XER_ENCODING   179

void asn1SccPoseUpdateThreshold_Initialize(asn1SccPoseUpdateThreshold* pVal);
flag asn1SccPoseUpdateThreshold_IsConstraintValid(const asn1SccPoseUpdateThreshold* val, int* pErrCode);


typedef asn1SccVector2d asn1SccPosition2D;

#define asn1SccPosition2D_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccPosition2D_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccPosition2D_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccPosition2D_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccPosition2D_REQUIRED_BYTES_FOR_XER_ENCODING   167

void asn1SccPosition2D_Initialize(asn1SccPosition2D* pVal);
flag asn1SccPosition2D_IsConstraintValid(const asn1SccPosition2D* val, int* pErrCode);


typedef struct {
    asn1SccPosition2D position;
    asn1SccT_Double orientation;
} asn1SccPose2D;

#define asn1SccPose2D_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccPose2D_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccPose2D_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccPose2D_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccPose2D_REQUIRED_BYTES_FOR_XER_ENCODING   257

void asn1SccPose2D_Initialize(asn1SccPose2D* pVal);
flag asn1SccPose2D_IsConstraintValid(const asn1SccPose2D* val, int* pErrCode);


typedef asn1SccVector3d asn1SccPosition;

#define asn1SccPosition_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccPosition_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccPosition_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccPosition_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccPosition_REQUIRED_BYTES_FOR_XER_ENCODING   234

void asn1SccPosition_Initialize(asn1SccPosition* pVal);
flag asn1SccPosition_IsConstraintValid(const asn1SccPosition* val, int* pErrCode);


typedef asn1SccQuaterniond asn1SccOrientation;

#define asn1SccOrientation_REQUIRED_BYTES_FOR_ENCODING       52 
#define asn1SccOrientation_REQUIRED_BITS_FOR_ENCODING        416
#define asn1SccOrientation_REQUIRED_BYTES_FOR_ACN_ENCODING   52 
#define asn1SccOrientation_REQUIRED_BITS_FOR_ACN_ENCODING    416
#define asn1SccOrientation_REQUIRED_BYTES_FOR_XER_ENCODING   311

void asn1SccOrientation_Initialize(asn1SccOrientation* pVal);
flag asn1SccOrientation_IsConstraintValid(const asn1SccOrientation* val, int* pErrCode);


typedef struct {
    asn1SccPosition pos;
    asn1SccOrientation orient;
} asn1SccPose;

#define asn1SccPose_REQUIRED_BYTES_FOR_ENCODING       91 
#define asn1SccPose_REQUIRED_BITS_FOR_ENCODING        728
#define asn1SccPose_REQUIRED_BYTES_FOR_ACN_ENCODING   91 
#define asn1SccPose_REQUIRED_BITS_FOR_ACN_ENCODING    728
#define asn1SccPose_REQUIRED_BYTES_FOR_XER_ENCODING   538

void asn1SccPose_Initialize(asn1SccPose* pVal);
flag asn1SccPose_IsConstraintValid(const asn1SccPose* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccPoseUpdateThreshold_Encode(const asn1SccPoseUpdateThreshold* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoseUpdateThreshold_Decode(asn1SccPoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoseUpdateThreshold_ACN_Encode(const asn1SccPoseUpdateThreshold* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoseUpdateThreshold_ACN_Decode(asn1SccPoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition2D_Encode(const asn1SccPosition2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition2D_Decode(asn1SccPosition2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition2D_ACN_Encode(const asn1SccPosition2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition2D_ACN_Decode(asn1SccPosition2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose2D_Encode(const asn1SccPose2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose2D_Decode(asn1SccPose2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose2D_ACN_Encode(const asn1SccPose2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose2D_ACN_Decode(asn1SccPose2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition_Encode(const asn1SccPosition* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition_Decode(asn1SccPosition* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPosition_ACN_Encode(const asn1SccPosition* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPosition_ACN_Decode(asn1SccPosition* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOrientation_Encode(const asn1SccOrientation* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOrientation_Decode(asn1SccOrientation* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccOrientation_ACN_Encode(const asn1SccOrientation* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccOrientation_ACN_Decode(asn1SccOrientation* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose_Encode(const asn1SccPose* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose_Decode(asn1SccPose* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPose_ACN_Encode(const asn1SccPose* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPose_ACN_Decode(asn1SccPose* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
