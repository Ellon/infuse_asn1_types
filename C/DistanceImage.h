#ifndef GENERATED_ASN1SCC_DISTANCEIMAGE_H
#define GENERATED_ASN1SCC_DISTANCEIMAGE_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Time.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_Float arr[60];
} asn1SccDistanceImage_data;

#define asn1SccDistanceImage_data_REQUIRED_BYTES_FOR_ENCODING       781 
#define asn1SccDistanceImage_data_REQUIRED_BITS_FOR_ENCODING        6246
#define asn1SccDistanceImage_data_REQUIRED_BYTES_FOR_ACN_ENCODING   781 
#define asn1SccDistanceImage_data_REQUIRED_BITS_FOR_ACN_ENCODING    6246
#define asn1SccDistanceImage_data_REQUIRED_BYTES_FOR_XER_ENCODING   4181

void asn1SccDistanceImage_data_Initialize(asn1SccDistanceImage_data* pVal);
flag asn1SccDistanceImage_data_IsConstraintValid(const asn1SccDistanceImage_data* val, int* pErrCode);
#ifndef ERR_asn1SccDistanceImage_data 
#define ERR_asn1SccDistanceImage_data		1001  /*(SIZE(1 .. maxDistanceImageSize))*/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;
    asn1SccT_Float scale_x;
    asn1SccT_Float scale_y;
    asn1SccT_Float center_x;
    asn1SccT_Float center_y;
    asn1SccDistanceImage_data data;
} asn1SccDistanceImage;

#define asn1SccDistanceImage_REQUIRED_BYTES_FOR_ENCODING       849 
#define asn1SccDistanceImage_REQUIRED_BITS_FOR_ENCODING        6790
#define asn1SccDistanceImage_REQUIRED_BYTES_FOR_ACN_ENCODING   849 
#define asn1SccDistanceImage_REQUIRED_BITS_FOR_ACN_ENCODING    6790
#define asn1SccDistanceImage_REQUIRED_BYTES_FOR_XER_ENCODING   4651

void asn1SccDistanceImage_Initialize(asn1SccDistanceImage* pVal);
flag asn1SccDistanceImage_IsConstraintValid(const asn1SccDistanceImage* val, int* pErrCode);


extern const asn1SccT_UInt32 maxDistanceImageSize; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccDistanceImage_data_Encode(const asn1SccDistanceImage_data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDistanceImage_data_Decode(asn1SccDistanceImage_data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDistanceImage_data_ACN_Encode(const asn1SccDistanceImage_data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDistanceImage_data_ACN_Decode(asn1SccDistanceImage_data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDistanceImage_Encode(const asn1SccDistanceImage* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDistanceImage_Decode(asn1SccDistanceImage* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDistanceImage_ACN_Encode(const asn1SccDistanceImage* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDistanceImage_ACN_Decode(asn1SccDistanceImage* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
