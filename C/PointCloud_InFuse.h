#ifndef GENERATED_ASN1SCC_POINTCLOUD_INFUSE_H
#define GENERATED_ASN1SCC_POINTCLOUD_INFUSE_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Eigen.h"
#include "Point.h"
#include "taste-types.h"
#include "Time.h"
#include "Pose_InFuse.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_Int32 arr[327680];
} asn1SccPointCloud_InFuse_intensity;

#define asn1SccPointCloud_InFuse_intensity_REQUIRED_BYTES_FOR_ENCODING       1310728 
#define asn1SccPointCloud_InFuse_intensity_REQUIRED_BITS_FOR_ENCODING        10485824
#define asn1SccPointCloud_InFuse_intensity_REQUIRED_BYTES_FOR_ACN_ENCODING   1310723 
#define asn1SccPointCloud_InFuse_intensity_REQUIRED_BITS_FOR_ACN_ENCODING    10485779
#define asn1SccPointCloud_InFuse_intensity_REQUIRED_BYTES_FOR_XER_ENCODING   12779579

void asn1SccPointCloud_InFuse_intensity_Initialize(asn1SccPointCloud_InFuse_intensity* pVal);
flag asn1SccPointCloud_InFuse_intensity_IsConstraintValid(const asn1SccPointCloud_InFuse_intensity* val, int* pErrCode);
#ifndef ERR_asn1SccPointCloud_InFuse_intensity 
#define ERR_asn1SccPointCloud_InFuse_intensity		1001  /*(SIZE(1 .. maxSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccPoint arr[327680];
} asn1SccPointCloud_InFuse_points;

#define asn1SccPointCloud_InFuse_points_REQUIRED_BYTES_FOR_ENCODING       12779528 
#define asn1SccPointCloud_InFuse_points_REQUIRED_BITS_FOR_ENCODING        102236224
#define asn1SccPointCloud_InFuse_points_REQUIRED_BYTES_FOR_ACN_ENCODING   12779523 
#define asn1SccPointCloud_InFuse_points_REQUIRED_BITS_FOR_ACN_ENCODING    102236179
#define asn1SccPointCloud_InFuse_points_REQUIRED_BYTES_FOR_XER_ENCODING   74711093

void asn1SccPointCloud_InFuse_points_Initialize(asn1SccPointCloud_InFuse_points* pVal);
flag asn1SccPointCloud_InFuse_points_IsConstraintValid(const asn1SccPointCloud_InFuse_points* val, int* pErrCode);
#ifndef ERR_asn1SccPointCloud_InFuse_points 
#define ERR_asn1SccPointCloud_InFuse_points		1002  /*(SIZE(1 .. maxSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccVector3d arr[327680];
} asn1SccPointCloud_InFuse_colors;

#define asn1SccPointCloud_InFuse_colors_REQUIRED_BYTES_FOR_ENCODING       12779528 
#define asn1SccPointCloud_InFuse_colors_REQUIRED_BITS_FOR_ENCODING        102236224
#define asn1SccPointCloud_InFuse_colors_REQUIRED_BYTES_FOR_ACN_ENCODING   12779523 
#define asn1SccPointCloud_InFuse_colors_REQUIRED_BITS_FOR_ACN_ENCODING    102236179
#define asn1SccPointCloud_InFuse_colors_REQUIRED_BYTES_FOR_XER_ENCODING   76677173

void asn1SccPointCloud_InFuse_colors_Initialize(asn1SccPointCloud_InFuse_colors* pVal);
flag asn1SccPointCloud_InFuse_colors_IsConstraintValid(const asn1SccPointCloud_InFuse_colors* val, int* pErrCode);
#ifndef ERR_asn1SccPointCloud_InFuse_colors 
#define ERR_asn1SccPointCloud_InFuse_colors		1003  /*(SIZE(1 .. maxSize))*/
#endif

typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccT_String sensorId;
    asn1SccT_String frameId;
    asn1SccTime timeStamp;
    flag isRegistered;
    flag isOrdered;
    asn1SccT_UInt32 height;
    asn1SccT_UInt32 width;
    flag hasFixedTransform;
    asn1SccPose_InFuse pose_robotFrame_sensorFrame;
    asn1SccPose_InFuse pose_fixedFrame_robotFrame;
    asn1SccPointCloud_InFuse_points points;
    asn1SccPointCloud_InFuse_colors colors;
    asn1SccPointCloud_InFuse_intensity intensity;
} asn1SccPointCloud_InFuse;

#define asn1SccPointCloud_InFuse_REQUIRED_BYTES_FOR_ENCODING       26874642 
#define asn1SccPointCloud_InFuse_REQUIRED_BITS_FOR_ENCODING        214997133
#define asn1SccPointCloud_InFuse_REQUIRED_BYTES_FOR_ACN_ENCODING   26874625 
#define asn1SccPointCloud_InFuse_REQUIRED_BITS_FOR_ACN_ENCODING    214996998
#define asn1SccPointCloud_InFuse_REQUIRED_BYTES_FOR_XER_ENCODING   164184230

void asn1SccPointCloud_InFuse_Initialize(asn1SccPointCloud_InFuse* pVal);
flag asn1SccPointCloud_InFuse_IsConstraintValid(const asn1SccPointCloud_InFuse* val, int* pErrCode);


extern const asn1SccT_UInt32 pointCloud_Infuse_Version;
extern const asn1SccT_UInt32 maxSize; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccPointCloud_InFuse_intensity_Encode(const asn1SccPointCloud_InFuse_intensity* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_intensity_Decode(asn1SccPointCloud_InFuse_intensity* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_InFuse_intensity_ACN_Encode(const asn1SccPointCloud_InFuse_intensity* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_intensity_ACN_Decode(asn1SccPointCloud_InFuse_intensity* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_InFuse_points_Encode(const asn1SccPointCloud_InFuse_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_points_Decode(asn1SccPointCloud_InFuse_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_InFuse_points_ACN_Encode(const asn1SccPointCloud_InFuse_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_points_ACN_Decode(asn1SccPointCloud_InFuse_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_InFuse_colors_Encode(const asn1SccPointCloud_InFuse_colors* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_colors_Decode(asn1SccPointCloud_InFuse_colors* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_InFuse_colors_ACN_Encode(const asn1SccPointCloud_InFuse_colors* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_colors_ACN_Decode(asn1SccPointCloud_InFuse_colors* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_InFuse_Encode(const asn1SccPointCloud_InFuse* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_Decode(asn1SccPointCloud_InFuse* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_InFuse_ACN_Encode(const asn1SccPointCloud_InFuse* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_InFuse_ACN_Decode(asn1SccPointCloud_InFuse* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
