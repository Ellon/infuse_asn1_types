#ifndef GENERATED_ASN1SCC_MULTILAYEREDMAP_H
#define GENERATED_ASN1SCC_MULTILAYEREDMAP_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_Float arr[10080000];
} asn1SccMultiLayeredMap_zValue;

#define asn1SccMultiLayeredMap_zValue_REQUIRED_BYTES_FOR_ENCODING       131040156 
#define asn1SccMultiLayeredMap_zValue_REQUIRED_BITS_FOR_ENCODING        1048321248
#define asn1SccMultiLayeredMap_zValue_REQUIRED_BYTES_FOR_ACN_ENCODING   131040003 
#define asn1SccMultiLayeredMap_zValue_REQUIRED_BITS_FOR_ACN_ENCODING    1048320024
#define asn1SccMultiLayeredMap_zValue_REQUIRED_BYTES_FOR_XER_ENCODING   695520049

void asn1SccMultiLayeredMap_zValue_Initialize(asn1SccMultiLayeredMap_zValue* pVal);
flag asn1SccMultiLayeredMap_zValue_IsConstraintValid(const asn1SccMultiLayeredMap_zValue* val, int* pErrCode);
#ifndef ERR_asn1SccMultiLayeredMap_zValue 
#define ERR_asn1SccMultiLayeredMap_zValue		1001  /*(SIZE(0 .. demNumberofElements))*/
#endif

typedef enum {
    asn1Sccempty = 0,
    asn1Sccfilled = 1
} asn1SccDemCellState;

#define asn1SccDemCellState_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccDemCellState_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccDemCellState_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccDemCellState_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccDemCellState_REQUIRED_BYTES_FOR_XER_ENCODING   44

void asn1SccDemCellState_Initialize(asn1SccDemCellState* pVal);
flag asn1SccDemCellState_IsConstraintValid(const asn1SccDemCellState* val, int* pErrCode);
#ifndef ERR_asn1SccDemCellState_unknown_enumeration_value 
#define ERR_asn1SccDemCellState_unknown_enumeration_value		1003  /**/
#endif
#ifndef ERR_asn1SccDemCellState 
#define ERR_asn1SccDemCellState		1002  /**/
#endif

typedef struct {    int nCount; 
    
    asn1SccDemCellState arr[1440000];
} asn1SccMultiLayeredMap_state;

#define asn1SccMultiLayeredMap_state_REQUIRED_BYTES_FOR_ENCODING       180024 
#define asn1SccMultiLayeredMap_state_REQUIRED_BITS_FOR_ENCODING        1440192
#define asn1SccMultiLayeredMap_state_REQUIRED_BYTES_FOR_ACN_ENCODING   180003 
#define asn1SccMultiLayeredMap_state_REQUIRED_BITS_FOR_ACN_ENCODING    1440021
#define asn1SccMultiLayeredMap_state_REQUIRED_BYTES_FOR_XER_ENCODING   28800047

void asn1SccMultiLayeredMap_state_Initialize(asn1SccMultiLayeredMap_state* pVal);
flag asn1SccMultiLayeredMap_state_IsConstraintValid(const asn1SccMultiLayeredMap_state* val, int* pErrCode);
#ifndef ERR_asn1SccMultiLayeredMap_state 
#define ERR_asn1SccMultiLayeredMap_state		1004  /*(SIZE(0 .. demMaxSize))*/
#endif

typedef struct {    
    asn1SccSint arr[2];
} asn1SccMultiLayeredMap_currentTile;

#define asn1SccMultiLayeredMap_currentTile_REQUIRED_BYTES_FOR_ENCODING       18 
#define asn1SccMultiLayeredMap_currentTile_REQUIRED_BITS_FOR_ENCODING        144
#define asn1SccMultiLayeredMap_currentTile_REQUIRED_BYTES_FOR_ACN_ENCODING   18 
#define asn1SccMultiLayeredMap_currentTile_REQUIRED_BITS_FOR_ACN_ENCODING    144
#define asn1SccMultiLayeredMap_currentTile_REQUIRED_BYTES_FOR_XER_ENCODING   137

void asn1SccMultiLayeredMap_currentTile_Initialize(asn1SccMultiLayeredMap_currentTile* pVal);
flag asn1SccMultiLayeredMap_currentTile_IsConstraintValid(const asn1SccMultiLayeredMap_currentTile* val, int* pErrCode);
#ifndef ERR_asn1SccMultiLayeredMap_currentTile 
#define ERR_asn1SccMultiLayeredMap_currentTile		1005  /*(SIZE(2))*/
#endif

typedef struct {
    asn1SccMultiLayeredMap_currentTile currentTile;
    asn1SccSint nbLines;
    asn1SccSint nbCols;
    asn1SccT_Float xOrigin;
    asn1SccT_Float yOrigin;
    asn1SccT_Float scale;
    asn1SccT_Float zOrigin;
    asn1SccT_Float zScale;
    asn1SccMultiLayeredMap_state state;
    asn1SccMultiLayeredMap_zValue zValue;
} asn1SccMultiLayeredMap;

#define asn1SccMultiLayeredMap_REQUIRED_BYTES_FOR_ENCODING       131220281 
#define asn1SccMultiLayeredMap_REQUIRED_BITS_FOR_ENCODING        1049762248
#define asn1SccMultiLayeredMap_REQUIRED_BYTES_FOR_ACN_ENCODING   131220107 
#define asn1SccMultiLayeredMap_REQUIRED_BITS_FOR_ACN_ENCODING    1049760853
#define asn1SccMultiLayeredMap_REQUIRED_BYTES_FOR_XER_ENCODING   724320587

void asn1SccMultiLayeredMap_Initialize(asn1SccMultiLayeredMap* pVal);
flag asn1SccMultiLayeredMap_IsConstraintValid(const asn1SccMultiLayeredMap* val, int* pErrCode);


extern const asn1SccT_UInt32 demMaxSize;
extern const asn1SccSint demLayers;
extern const asn1SccT_UInt32 demNumberofElements; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccMultiLayeredMap_zValue_Encode(const asn1SccMultiLayeredMap_zValue* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_zValue_Decode(asn1SccMultiLayeredMap_zValue* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMultiLayeredMap_zValue_ACN_Encode(const asn1SccMultiLayeredMap_zValue* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_zValue_ACN_Decode(asn1SccMultiLayeredMap_zValue* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDemCellState_Encode(const asn1SccDemCellState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDemCellState_Decode(asn1SccDemCellState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccDemCellState_ACN_Encode(const asn1SccDemCellState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDemCellState_ACN_Decode(asn1SccDemCellState* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMultiLayeredMap_state_Encode(const asn1SccMultiLayeredMap_state* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_state_Decode(asn1SccMultiLayeredMap_state* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMultiLayeredMap_state_ACN_Encode(const asn1SccMultiLayeredMap_state* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_state_ACN_Decode(asn1SccMultiLayeredMap_state* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMultiLayeredMap_currentTile_Encode(const asn1SccMultiLayeredMap_currentTile* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_currentTile_Decode(asn1SccMultiLayeredMap_currentTile* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMultiLayeredMap_currentTile_ACN_Encode(const asn1SccMultiLayeredMap_currentTile* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_currentTile_ACN_Decode(asn1SccMultiLayeredMap_currentTile* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMultiLayeredMap_Encode(const asn1SccMultiLayeredMap* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_Decode(asn1SccMultiLayeredMap* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccMultiLayeredMap_ACN_Encode(const asn1SccMultiLayeredMap* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMultiLayeredMap_ACN_Decode(asn1SccMultiLayeredMap* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccempty	asn1Sccempty
#define ENUM_asn1Sccfilled	asn1Sccfilled

#endif

#endif
