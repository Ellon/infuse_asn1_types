#ifndef GENERATED_ASN1SCC_POINTCLOUD_H
#define GENERATED_ASN1SCC_POINTCLOUD_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Eigen.h"
#include "Point.h"
#include "TransformWithCovariance.h"
#include "taste-types.h"
#include "Time.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_Int32 arr[400000];
} asn1SccPointCloud_Data_intensity;

#define asn1SccPointCloud_Data_intensity_REQUIRED_BYTES_FOR_ENCODING       1600009 
#define asn1SccPointCloud_Data_intensity_REQUIRED_BITS_FOR_ENCODING        12800072
#define asn1SccPointCloud_Data_intensity_REQUIRED_BYTES_FOR_ACN_ENCODING   1600003 
#define asn1SccPointCloud_Data_intensity_REQUIRED_BITS_FOR_ACN_ENCODING    12800019
#define asn1SccPointCloud_Data_intensity_REQUIRED_BYTES_FOR_XER_ENCODING   15600055

void asn1SccPointCloud_Data_intensity_Initialize(asn1SccPointCloud_Data_intensity* pVal);
flag asn1SccPointCloud_Data_intensity_IsConstraintValid(const asn1SccPointCloud_Data_intensity* val, int* pErrCode);
#ifndef ERR_asn1SccPointCloud_Data_intensity 
#define ERR_asn1SccPointCloud_Data_intensity		1001  /*(SIZE(0 .. maxPointcloudSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccVector3d arr[400000];
} asn1SccPointCloud_Data_colors;

#define asn1SccPointCloud_Data_colors_REQUIRED_BYTES_FOR_ENCODING       15600009 
#define asn1SccPointCloud_Data_colors_REQUIRED_BITS_FOR_ENCODING        124800072
#define asn1SccPointCloud_Data_colors_REQUIRED_BYTES_FOR_ACN_ENCODING   15600003 
#define asn1SccPointCloud_Data_colors_REQUIRED_BITS_FOR_ACN_ENCODING    124800019
#define asn1SccPointCloud_Data_colors_REQUIRED_BYTES_FOR_XER_ENCODING   93600049

void asn1SccPointCloud_Data_colors_Initialize(asn1SccPointCloud_Data_colors* pVal);
flag asn1SccPointCloud_Data_colors_IsConstraintValid(const asn1SccPointCloud_Data_colors* val, int* pErrCode);
#ifndef ERR_asn1SccPointCloud_Data_colors 
#define ERR_asn1SccPointCloud_Data_colors		1002  /*(SIZE(0 .. maxPointcloudSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccPoint arr[400000];
} asn1SccPointCloud_Data_points;

#define asn1SccPointCloud_Data_points_REQUIRED_BYTES_FOR_ENCODING       15600009 
#define asn1SccPointCloud_Data_points_REQUIRED_BITS_FOR_ENCODING        124800072
#define asn1SccPointCloud_Data_points_REQUIRED_BYTES_FOR_ACN_ENCODING   15600003 
#define asn1SccPointCloud_Data_points_REQUIRED_BITS_FOR_ACN_ENCODING    124800019
#define asn1SccPointCloud_Data_points_REQUIRED_BYTES_FOR_XER_ENCODING   91200049

void asn1SccPointCloud_Data_points_Initialize(asn1SccPointCloud_Data_points* pVal);
flag asn1SccPointCloud_Data_points_IsConstraintValid(const asn1SccPointCloud_Data_points* val, int* pErrCode);
#ifndef ERR_asn1SccPointCloud_Data_points 
#define ERR_asn1SccPointCloud_Data_points		1003  /*(SIZE(0 .. maxPointcloudSize))*/
#endif

typedef struct {
    asn1SccPointCloud_Data_points points;
    asn1SccPointCloud_Data_colors colors;
    asn1SccPointCloud_Data_intensity intensity;
} asn1SccPointCloud_Data;

#define asn1SccPointCloud_Data_REQUIRED_BYTES_FOR_ENCODING       32800027 
#define asn1SccPointCloud_Data_REQUIRED_BITS_FOR_ENCODING        262400216
#define asn1SccPointCloud_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   32800008 
#define asn1SccPointCloud_Data_REQUIRED_BITS_FOR_ACN_ENCODING    262400057
#define asn1SccPointCloud_Data_REQUIRED_BYTES_FOR_XER_ENCODING   200400092

void asn1SccPointCloud_Data_Initialize(asn1SccPointCloud_Data* pVal);
flag asn1SccPointCloud_Data_IsConstraintValid(const asn1SccPointCloud_Data* val, int* pErrCode);


typedef struct {
    asn1SccT_UInt32 msgVersion;
    asn1SccT_String sensorId;
    asn1SccT_String frameId;
    asn1SccTime timeStamp;
    asn1SccT_UInt32 height;
    asn1SccT_UInt32 width;
    flag isRegistered;
    flag isOrdered;
    flag hasFixedTransform;
    asn1SccTransformWithCovariance pose_robotFrame_sensorFrame;
    asn1SccTransformWithCovariance pose_fixedFrame_robotFrame;
} asn1SccPointCloud_Metadata;

#define asn1SccPointCloud_Metadata_REQUIRED_BYTES_FOR_ENCODING       3258 
#define asn1SccPointCloud_Metadata_REQUIRED_BITS_FOR_ENCODING        26057
#define asn1SccPointCloud_Metadata_REQUIRED_BYTES_FOR_ACN_ENCODING   3258 
#define asn1SccPointCloud_Metadata_REQUIRED_BITS_FOR_ACN_ENCODING    26057
#define asn1SccPointCloud_Metadata_REQUIRED_BYTES_FOR_XER_ENCODING   12333

void asn1SccPointCloud_Metadata_Initialize(asn1SccPointCloud_Metadata* pVal);
flag asn1SccPointCloud_Metadata_IsConstraintValid(const asn1SccPointCloud_Metadata* val, int* pErrCode);


typedef struct {
    asn1SccPointCloud_Metadata metadata;
    asn1SccPointCloud_Data data;
} asn1SccPointcloud;

#define asn1SccPointcloud_REQUIRED_BYTES_FOR_ENCODING       32803285 
#define asn1SccPointcloud_REQUIRED_BITS_FOR_ENCODING        262426273
#define asn1SccPointcloud_REQUIRED_BYTES_FOR_ACN_ENCODING   32803265 
#define asn1SccPointcloud_REQUIRED_BITS_FOR_ACN_ENCODING    262426114
#define asn1SccPointcloud_REQUIRED_BYTES_FOR_XER_ENCODING   200412406

void asn1SccPointcloud_Initialize(asn1SccPointcloud* pVal);
flag asn1SccPointcloud_IsConstraintValid(const asn1SccPointcloud* val, int* pErrCode);


extern const asn1SccT_UInt32 maxPointcloudSize;
extern const asn1SccT_UInt32 pointCloud_Version; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccPointCloud_Data_intensity_Encode(const asn1SccPointCloud_Data_intensity* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_intensity_Decode(asn1SccPointCloud_Data_intensity* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Data_intensity_ACN_Encode(const asn1SccPointCloud_Data_intensity* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_intensity_ACN_Decode(asn1SccPointCloud_Data_intensity* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Data_colors_Encode(const asn1SccPointCloud_Data_colors* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_colors_Decode(asn1SccPointCloud_Data_colors* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Data_colors_ACN_Encode(const asn1SccPointCloud_Data_colors* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_colors_ACN_Decode(asn1SccPointCloud_Data_colors* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Data_points_Encode(const asn1SccPointCloud_Data_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_points_Decode(asn1SccPointCloud_Data_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Data_points_ACN_Encode(const asn1SccPointCloud_Data_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_points_ACN_Decode(asn1SccPointCloud_Data_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Data_Encode(const asn1SccPointCloud_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_Decode(asn1SccPointCloud_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Data_ACN_Encode(const asn1SccPointCloud_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Data_ACN_Decode(asn1SccPointCloud_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Metadata_Encode(const asn1SccPointCloud_Metadata* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Metadata_Decode(asn1SccPointCloud_Metadata* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointCloud_Metadata_ACN_Encode(const asn1SccPointCloud_Metadata* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointCloud_Metadata_ACN_Decode(asn1SccPointCloud_Metadata* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointcloud_Encode(const asn1SccPointcloud* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointcloud_Decode(asn1SccPointcloud* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPointcloud_ACN_Encode(const asn1SccPointcloud* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPointcloud_ACN_Decode(asn1SccPointcloud* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
