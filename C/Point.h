#ifndef GENERATED_ASN1SCC_POINT_H
#define GENERATED_ASN1SCC_POINT_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "Eigen.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccVector3d asn1SccPoint;

#define asn1SccPoint_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccPoint_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccPoint_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccPoint_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccPoint_REQUIRED_BYTES_FOR_XER_ENCODING   228

void asn1SccPoint_Initialize(asn1SccPoint* pVal);
flag asn1SccPoint_IsConstraintValid(const asn1SccPoint* val, int* pErrCode);


typedef asn1SccVector3d asn1SccPoint3D;

#define asn1SccPoint3D_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccPoint3D_REQUIRED_BITS_FOR_ENCODING        312
#define asn1SccPoint3D_REQUIRED_BYTES_FOR_ACN_ENCODING   39 
#define asn1SccPoint3D_REQUIRED_BITS_FOR_ACN_ENCODING    312
#define asn1SccPoint3D_REQUIRED_BYTES_FOR_XER_ENCODING   232

void asn1SccPoint3D_Initialize(asn1SccPoint3D* pVal);
flag asn1SccPoint3D_IsConstraintValid(const asn1SccPoint3D* val, int* pErrCode);


typedef asn1SccVector2d asn1SccPoint2D;

#define asn1SccPoint2D_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccPoint2D_REQUIRED_BITS_FOR_ENCODING        208
#define asn1SccPoint2D_REQUIRED_BYTES_FOR_ACN_ENCODING   26 
#define asn1SccPoint2D_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define asn1SccPoint2D_REQUIRED_BYTES_FOR_XER_ENCODING   161

void asn1SccPoint2D_Initialize(asn1SccPoint2D* pVal);
flag asn1SccPoint2D_IsConstraintValid(const asn1SccPoint2D* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccPoint_Encode(const asn1SccPoint* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint_Decode(asn1SccPoint* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint_ACN_Encode(const asn1SccPoint* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint_ACN_Decode(asn1SccPoint* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint3D_Encode(const asn1SccPoint3D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint3D_Decode(asn1SccPoint3D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint3D_ACN_Encode(const asn1SccPoint3D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint3D_ACN_Decode(asn1SccPoint3D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint2D_Encode(const asn1SccPoint2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint2D_Decode(asn1SccPoint2D* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPoint2D_ACN_Encode(const asn1SccPoint2D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPoint2D_ACN_Decode(asn1SccPoint2D* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
