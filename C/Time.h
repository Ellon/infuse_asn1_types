#ifndef GENERATED_ASN1SCC_TIME_H
#define GENERATED_ASN1SCC_TIME_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    asn1SccT_Int64 microseconds;
    asn1SccT_Int32 usecPerSec;
} asn1SccTime;

#define asn1SccTime_REQUIRED_BYTES_FOR_ENCODING       12 
#define asn1SccTime_REQUIRED_BITS_FOR_ENCODING        96
#define asn1SccTime_REQUIRED_BYTES_FOR_ACN_ENCODING   12 
#define asn1SccTime_REQUIRED_BITS_FOR_ACN_ENCODING    96
#define asn1SccTime_REQUIRED_BYTES_FOR_XER_ENCODING   107

void asn1SccTime_Initialize(asn1SccTime* pVal);
flag asn1SccTime_IsConstraintValid(const asn1SccTime* val, int* pErrCode);


typedef enum {
    asn1Sccseconds = 0,
    asn1Sccmilliseconds = 1,
    asn1Sccmicroseconds = 2
} asn1SccResolution;

#define asn1SccResolution_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccResolution_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccResolution_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccResolution_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccResolution_REQUIRED_BYTES_FOR_XER_ENCODING   42

void asn1SccResolution_Initialize(asn1SccResolution* pVal);
flag asn1SccResolution_IsConstraintValid(const asn1SccResolution* val, int* pErrCode);
#ifndef ERR_asn1SccResolution_unknown_enumeration_value 
#define ERR_asn1SccResolution_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_asn1SccResolution 
#define ERR_asn1SccResolution		1001  /**/
#endif

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccTime_Encode(const asn1SccTime* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTime_Decode(asn1SccTime* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTime_ACN_Encode(const asn1SccTime* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTime_ACN_Decode(asn1SccTime* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccResolution_Encode(const asn1SccResolution* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccResolution_Decode(asn1SccResolution* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccResolution_ACN_Encode(const asn1SccResolution* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccResolution_ACN_Decode(asn1SccResolution* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccseconds	asn1Sccseconds
#define ENUM_asn1Sccmilliseconds	asn1Sccmilliseconds
#define ENUM_asn1Sccmicroseconds	asn1Sccmicroseconds

#endif

#endif
