#ifndef GENERATED_ASN1SCC_COMPRESSEDFRAME_H
#define GENERATED_ASN1SCC_COMPRESSEDFRAME_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Time.h"
#include "Frame.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    asn1SccT_UInt8 arr[262144];
} asn1SccCompressedFrame_image;

#define asn1SccCompressedFrame_image_REQUIRED_BYTES_FOR_ENCODING       262151 
#define asn1SccCompressedFrame_image_REQUIRED_BITS_FOR_ENCODING        2097208
#define asn1SccCompressedFrame_image_REQUIRED_BYTES_FOR_ACN_ENCODING   262147 
#define asn1SccCompressedFrame_image_REQUIRED_BITS_FOR_ACN_ENCODING    2097170
#define asn1SccCompressedFrame_image_REQUIRED_BYTES_FOR_XER_ENCODING   10223663

void asn1SccCompressedFrame_image_Initialize(asn1SccCompressedFrame_image* pVal);
flag asn1SccCompressedFrame_image_IsConstraintValid(const asn1SccCompressedFrame_image* val, int* pErrCode);
#ifndef ERR_asn1SccCompressedFrame_image 
#define ERR_asn1SccCompressedFrame_image		1001  /*(SIZE(1 .. maxCompressedFrameImageSize))*/
#endif

typedef struct {    int nCount; 
    
    asn1SccFrame_attrib_t arr[10];
} asn1SccCompressedFrame_attributes;

#define asn1SccCompressedFrame_attributes_REQUIRED_BYTES_FOR_ENCODING       5143 
#define asn1SccCompressedFrame_attributes_REQUIRED_BITS_FOR_ENCODING        41144
#define asn1SccCompressedFrame_attributes_REQUIRED_BYTES_FOR_ACN_ENCODING   5143 
#define asn1SccCompressedFrame_attributes_REQUIRED_BITS_FOR_ACN_ENCODING    41144
#define asn1SccCompressedFrame_attributes_REQUIRED_BYTES_FOR_XER_ENCODING   10887

void asn1SccCompressedFrame_attributes_Initialize(asn1SccCompressedFrame_attributes* pVal);
flag asn1SccCompressedFrame_attributes_IsConstraintValid(const asn1SccCompressedFrame_attributes* val, int* pErrCode);
#ifndef ERR_asn1SccCompressedFrame_attributes 
#define ERR_asn1SccCompressedFrame_attributes		1002  /*(SIZE(1 .. maxCompressedFrameImageAttributes))*/
#endif

typedef enum {
    asn1Sccmode_compressed_undefined = 0,
    asn1SccFrame_compressed_mode_t_mode_pjpg = 1
} asn1SccFrame_compressed_mode_t;

#define asn1SccFrame_compressed_mode_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccFrame_compressed_mode_t_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccFrame_compressed_mode_t_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccFrame_compressed_mode_t_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccFrame_compressed_mode_t_REQUIRED_BYTES_FOR_XER_ENCODING   72

void asn1SccFrame_compressed_mode_t_Initialize(asn1SccFrame_compressed_mode_t* pVal);
flag asn1SccFrame_compressed_mode_t_IsConstraintValid(const asn1SccFrame_compressed_mode_t* val, int* pErrCode);
#ifndef ERR_asn1SccFrame_compressed_mode_t_unknown_enumeration_value 
#define ERR_asn1SccFrame_compressed_mode_t_unknown_enumeration_value		1004  /**/
#endif
#ifndef ERR_asn1SccFrame_compressed_mode_t 
#define ERR_asn1SccFrame_compressed_mode_t		1003  /**/
#endif

typedef struct {
    asn1SccTime ref_time;
    asn1SccTime received_time;
    asn1SccCompressedFrame_image image;
    asn1SccCompressedFrame_attributes attributes;
    asn1SccT_UInt32 rows;
    asn1SccT_UInt32 cols;
    asn1SccFrame_compressed_mode_t frame_mode;
    asn1SccFrame_status_t frame_status;
} asn1SccCompressedFrame;

#define asn1SccCompressedFrame_REQUIRED_BYTES_FOR_ENCODING       267327 
#define asn1SccCompressedFrame_REQUIRED_BITS_FOR_ENCODING        2138611
#define asn1SccCompressedFrame_REQUIRED_BYTES_FOR_ACN_ENCODING   267322 
#define asn1SccCompressedFrame_REQUIRED_BITS_FOR_ACN_ENCODING    2138573
#define asn1SccCompressedFrame_REQUIRED_BYTES_FOR_XER_ENCODING   10234929

void asn1SccCompressedFrame_Initialize(asn1SccCompressedFrame* pVal);
flag asn1SccCompressedFrame_IsConstraintValid(const asn1SccCompressedFrame* val, int* pErrCode);


extern const asn1SccT_UInt32 maxCompressedFrameImageSize;
extern const asn1SccT_UInt32 maxCompressedFrameImageAttributes; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccCompressedFrame_image_Encode(const asn1SccCompressedFrame_image* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCompressedFrame_image_Decode(asn1SccCompressedFrame_image* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCompressedFrame_image_ACN_Encode(const asn1SccCompressedFrame_image* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCompressedFrame_image_ACN_Decode(asn1SccCompressedFrame_image* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCompressedFrame_attributes_Encode(const asn1SccCompressedFrame_attributes* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCompressedFrame_attributes_Decode(asn1SccCompressedFrame_attributes* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCompressedFrame_attributes_ACN_Encode(const asn1SccCompressedFrame_attributes* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCompressedFrame_attributes_ACN_Decode(asn1SccCompressedFrame_attributes* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_compressed_mode_t_Encode(const asn1SccFrame_compressed_mode_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_compressed_mode_t_Decode(asn1SccFrame_compressed_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFrame_compressed_mode_t_ACN_Encode(const asn1SccFrame_compressed_mode_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFrame_compressed_mode_t_ACN_Decode(asn1SccFrame_compressed_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCompressedFrame_Encode(const asn1SccCompressedFrame* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCompressedFrame_Decode(asn1SccCompressedFrame* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccCompressedFrame_ACN_Encode(const asn1SccCompressedFrame* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccCompressedFrame_ACN_Decode(asn1SccCompressedFrame* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccmode_compressed_undefined	asn1Sccmode_compressed_undefined
#define ENUM_asn1SccFrame_compressed_mode_t_mode_pjpg	asn1SccFrame_compressed_mode_t_mode_pjpg

#endif

#endif
